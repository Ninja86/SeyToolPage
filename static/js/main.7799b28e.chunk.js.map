{"version":3,"sources":["reducers/reducers.js","const/YoutubePlayerState.js","util/util-string.js","util/util-moment.js","components/youtubePlayer/progressPublisher.js","components/youtubePlayer/YoutubePlayerBorder.js","components/subtitle/SubtitleBorderElement.js","util/util-dialog.js","components/subtitle/SubtitleBorder.js","App.js","index.js"],"names":["combineReducers","youtubePlayerBorderEvent","state","arguments","length","undefined","payload","youtubeIdUpdateEvent","moment","youtubeId","addSubtitleBeginTimeEvent","time","action","type","subtitleBorderEvent","playPhaseEvent","startTime","endTime","NOT_STARTED","PLAYING","PAUSED","CUED","filterToNumberStr","str","split","match","join","formatToHHmmss_ss","sec","longValue","duration","hours","minutes","seconds","millisecondsStr","Math","floor","milliseconds","toString","len","i","parseHHmmss_ss","substring","valueOf","isUpdatedMoment","currentMoment","newMoment","console","log","ProgressPublisher","progressTimeId","youtubePlayer","onProgressCallback","eventQueue","onReady","e","_this","target","onStateChanged","that","data","setInterval","currentTime","getCurrentTime","found","find","targetTime","callback","splice","indexOf","clearTimeout","setOnProgress","setAlarm","push","_","require","YoutubePlayerBorder","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendingEvent","currentEvent","progressPublisher","update","newProps","curPlayPhaseEvent","newPlayPhaseEvent","clone","playPhase","seekTo","playVideo","pauseVideo","onYoutubeReady","onYoutubeStateChanged","createAction","assign","onLoadButtonClick","dispatch","cueVideoById","onKeyPressed","key","playerState","getPlayerState","seek","parseFloat","preSeekInterval","nextSeekInterval","onProgress","curTime","setState","progressTime","_this2","offsetInputStyle","width","marginLeft","marginRight","textAlign","react_default","a","createElement","style","position","height","boxSizing","PanelGroup","Panel","bsStyle","Body","react_keyboard_event_handler_default","handleKeys","onKeyEvent","FormGroup","InputGroup","FormControl","placeholder","onChange","value","Button","onClick","YouTube","videoId","opts","playerVars","autoplay","onStateChange","Heading","padding","marginBottom","borderWidth","borderColor","borderStyle","Form","inline","ControlLabel","fontWeight","isNaN","marginTop","Component","connect","SubtitleBorderElement","updateStateFromProp","english","kor","start","startStr","end","endStr","learn","onEnglishTextChanged","onKorTextChanged","onRemoveButtonClick","onRemoveButtonClicked","index","onAddButtonClick","onAddButtonClicked","onPlayButtonClick","onPlayButtonClicked","onCheckChanged","checked","onBeginInputBlur","onEndInputBlur","prevProps","prevState","timeInputStyle","textAreaStyle","resize","background","focus","float","bsSize","Glyphicon","glyph","onBlur","onKeyPress","charCode","onBeginInputPressed","Checkbox","componentClass","clear","React","defaultProps","domHeight","simpleAlert","msg","confirmAlert","customUI","_ref","onClose","centerBoxStyle","display","className","Alert","xml2js","convert","SubtitleBorder","dom","element","fileReader","onFileContentLoaded","content","rawJson","JSON","parse","xml2json","compact","spaces","transcript","text","map","attributes","_attributes","dur","learning","_text","refs","fileUploader","asyncToGenerator","regenerator_default","mark","_callee","newYoutubeIdUpdateEvent","currentYoutubeIdUpdateEvent","newAddSubtitleBeginTimeEvent","currentAddSubtitleBeginTimeEvent","wrap","_context","prev","next","showLoading","fetchTranscriptXml","sent","t0","abrupt","insertSubtitleElement","stop","_x","apply","onExportButtonClicked","title","refineTranscriptToXmlJson","file","Blob","href","URL","createObjectURL","download","concat","click","onImportButtonClicked","onChangeFile","stopPropagation","preventDefault","files","readAsText","targetJson","declaration","version","encoding","elements","name","src","toConsumableArray","forEach","ele","json2xml","ignoreComment","htmlDecode","input","innerHTML","childNodes","nodeValue","_ref2","_callee2","_context2","fetch","method","then","response","Promise","resolve","reject","parseString","err","result","$","_x2","removeSubtitleElement","filter","idx","addSubtitleElement","front","rear","transcriptEle","copied","getSortTranscripts","phaseInfo","transcripts","sort","b","nearNext","loading","bind","assertThisInitialized","document","FileReader","onload","snapshot","minWidth","fontSize","overflow","subtitle_SubtitleBorderElement","top","left","transform","react_loader_spinner_default","color","id","ref","App","youtubePlayer_YoutubePlayerBorder","subtitle_SubtitleBorder","rootElement","getElementById","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","react_redux_es","src_App"],"mappings":"6PA8CeA,cAAgB,CAC3BC,yBA7B6B,WAA4C,IAA3CC,EAA2CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAdlE,CACHG,QAAS,CACLC,qBAAsB,CAClBC,OAAQA,MACRC,UAAW,MAEfC,0BAA2B,CACvBF,OAAQ,KACRG,KAAM,QAM4CC,EAAWT,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzE,OAAQO,EAAOC,MACX,IAAK,sBACD,MAAO,CAAEP,QAASM,EAAON,SAEjC,OAAOJ,GAyBPY,oBAVwB,WAAmD,IAAlDZ,EAAkDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAXpE,CACHG,QAAS,CACLS,eAAgB,CACZP,OAAQ,KACRQ,UAAW,KACXC,QAAS,QAM2CL,EAAWT,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3E,OAAQO,EAAOC,MACX,IAAK,iBACD,MAAO,CAAEP,QAASM,EAAON,SAEjC,OAAOJ,wECnCLgB,GAAe,EAEfC,EAAU,EACVC,EAAS,EAETC,EAAO,0ECbAC,EAAoB,SAACC,GAC9B,IAEIC,GADJD,GAAOA,EAAIE,MADF,aACe,IAAIC,KAAK,KACjBF,MAAM,KAItB,OAHIA,EAAMpB,OAAS,IACfmB,EAAMC,EAAM,GAAK,IAAMA,EAAM,IAE1BD,GCLEI,EAAoB,SAACC,GAC9B,IAAIC,EAAkB,IAAND,EACZE,EAAWtB,IAAOsB,SAASD,GAC3BN,EAAM,GACVA,GAAOO,EAASC,SAAW,GAAKD,EAASC,QAAU,IAAM,IAAMD,EAASC,QAAU,IAClFR,GAAOO,EAASE,WAAa,GAAKF,EAASE,UAAY,IAAM,IAAMF,EAASE,UAAY,IACxFT,GAAOO,EAASG,WAAa,GAAKH,EAASG,UAAY,IAAM,IAAMH,EAASG,UAAY,IAGxF,IAFA,IAAIC,EAAkBC,KAAKC,MAAMN,EAASO,gBAAgBC,WACpDC,EAAML,EAAgB9B,OACnBoC,EAAI,EAAGA,EAAI,EAAED,EAAKC,IACvBN,EAAkB,IAAMA,EAI5B,OAFAX,GAAOW,GAKEO,EAAiB,SAAClB,GAC3B,IAAIC,EAAQD,EAAIC,MAAM,KAKtB,OAJqB,IAAjBA,EAAMpB,QAAgBoB,EAAM,GAAGpB,OAAS,IACxCmB,EAAMC,EAAM,GAAK,IAAMA,EAAM,GAAGkB,UAAU,EAAG,IAEjClC,IAAOsB,SAASP,GAAKoB,UAClB,KAGVC,EAAkB,SAACC,EAAeC,GAG3C,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACM,OAAdA,IAEkB,OAAlBD,GAA0BA,EAAgBC,IC/B7BG,mDAEjBC,eAAiB,UACjBC,cAAgB,UAChBC,mBAAqB,UAErBC,WAAa,QAEbC,QAAU,SAACC,GACPC,EAAKL,cAAgBI,EAAEE,aAG3BC,eAAiB,SAACH,GACd,IAAII,EAAOH,EAEPD,EAAEK,OAASzC,EACXqC,EAAKN,eAAiBW,YAAY,WAC9B,GAAIF,EAAKR,cAAe,CACpB,IAAIW,EAAcH,EAAKR,cAAcY,iBAGrC,GAFIJ,EAAKP,oBACLO,EAAKP,mBAAmBU,GACxBH,EAAKN,WAAWjD,OAAS,EAAG,CAC5B,IAAI4D,EAAQL,EAAKN,WAAWY,KAAK,SAAAV,GAC7B,OAAOO,GAAeP,EAAEW,kBAEd7D,IAAV2D,IACAA,EAAMG,WACNR,EAAKN,WAAWe,OAAOT,EAAKN,WAAWgB,QAAQL,GAAQ,OAIpE,IAEHM,aAAad,EAAKN,sBAI1BqB,cAAgB,SAACJ,GACbX,EAAKJ,mBAAqBe,QAG9BK,SAAW,SAACN,EAAYC,GACpBX,EAAKH,WAAWoB,KAAK,CACjBP,WAAYA,EACZC,SAAUA,MCnClBO,EAAIC,EAAQ,IAEVC,cA2BF,SAAAA,EAAYC,GAAO,IAAArB,EAAA,OAAAsB,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfpB,EAAAsB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMH,KA1BV1B,cAAgB,KAyBGK,EAvBnB4B,aAAe,CACX7E,qBAAsB,CAClBC,OAAQ,KACRC,UAAW,MAEfC,0BAA2B,CACvBF,OAAQ,KACRG,KAAM,OAgBK6C,EAZnB6B,aAAgB,CACZvE,oBAAqB,CACjBC,eAAgB,CACZP,OAAQ,KACRQ,UAAW,KACXC,QAAS,QAOFuC,EAFnB8B,kBAAoB,IAAIrC,EAELO,EAuBnB+B,OAAS,SAACC,GACN,IAAIC,EAAoBjC,EAAK6B,aAAavE,oBAAoBC,eAC1D2E,EAAoBF,EAAS1E,oBAAoBC,eACjD6B,EAAgB6C,EAAkBjF,OAAQkF,EAAkBlF,UAC5DgD,EAAK6B,aAAavE,oBAAoBC,eAAiB2D,EAAEiB,MAAMD,GAC/DlC,EAAKoC,UAAUF,EAAkB1E,UAAW0E,EAAkBzE,WA5BnDuC,EAgCnBoC,UAAY,SAAC5E,EAAWC,GACpBuC,EAAKL,cAAc0C,OAAO7E,GAC1BwC,EAAKL,cAAc2C,YACnBtC,EAAK8B,kBAAkBd,SAASvD,EAAS,WACrCuC,EAAKL,cAAc4C,gBApCRvC,EAwCnBwC,eAAiB,SAACzC,GACdC,EAAKL,cAAgBI,EAAEE,OACvBD,EAAK8B,kBAAkBhC,QAAQC,IA1ChBC,EA6CnByC,sBAAwB,SAAC1C,GACrBC,EAAK8B,kBAAkB5B,eAAeH,IA9CvBC,EAiDnB0C,aAAe,WACX,MAAO,CAAErF,KAAM,sBAAuBP,QAASwE,OAAOqB,OAAO,GAAIzB,EAAEiB,MAAMnC,EAAK4B,iBAlD/D5B,EAqDnB4C,kBAAoB,SAAC7C,GACjBC,EAAK4B,aAAa7E,qBAAqBC,OAAS,IAAIA,IACpDgD,EAAK4B,aAAa7E,qBAAqBE,UAAY+C,EAAKtD,MAAMO,UAC9D+C,EAAKqB,MAAMwB,SAAS7C,EAAK0C,gBACzB1C,EAAKL,cAAcmD,aAAa9C,EAAKtD,MAAMO,YAzD5B+C,EA4DnB+C,aAAe,SAACC,GACZ,GAA2B,OAAvBhD,EAAKL,cAAT,CAGA,IAAIsD,EAAcjD,EAAKL,cAAcuD,iBAErC,OAAQF,GACJ,IAAK,QAEGC,IAAgBpF,EAChBmC,EAAKL,cAAc2C,YACZW,IAAgBvF,GAAeuF,IAAgBrF,EACtDoC,EAAKL,cAAc2C,YACZW,IAAgBtF,GACvBqC,EAAKL,cAAc4C,aAEvB,MACJ,IAAK,OACD,GAAIU,IAAgBtF,GAAWsF,IAAgBrF,EAAQ,CACnD,IAAIuF,EAAOnD,EAAKL,cAAcY,iBAAmB6C,WAAWpD,EAAKtD,MAAM2G,iBACvErD,EAAKL,cAAc4C,aACnBvC,EAAKL,cAAc0C,OAAOc,GAE9B,MACJ,IAAK,QACD,GAAIF,IAAgBtF,GAAWsF,IAAgBrF,EAAQ,CACnD,IAAIuF,EAAOnD,EAAKL,cAAcY,iBAAmB6C,WAAWpD,EAAKtD,MAAM4G,kBACvEtD,EAAKL,cAAc4C,aACnBvC,EAAKL,cAAc0C,OAAOc,GAE9B,MACJ,IAAK,IACL,IAAK,IACGF,IAAgBtF,GAAWsF,IAAgBrF,IAC3CoC,EAAK4B,aAAa1E,0BAA0BF,OAAS,IAAIA,IACzDgD,EAAK4B,aAAa1E,0BAA0BC,KAAO6C,EAAKL,cAAcY,iBACtEP,EAAKqB,MAAMwB,SAAS7C,EAAK0C,oBAhGtB1C,EAsGnBuD,WAAa,SAACC,GACVxD,EAAKyD,SAAS,CAACC,aAAcF,KApG7BxD,EAAKtD,MAAQ,CACTO,UAAW,cACXoG,gBAAiB,IACjBC,iBAAkB,IAClBI,aAAc,GAGlB1D,EAAK8B,kBAAkBf,cAAcf,EAAKuD,YAV3BvD,oFAcfwB,KAAKI,aAAa7E,qBAAqBE,UAAYuE,KAAK9E,MAAMO,UAC9DuE,KAAKI,aAAa7E,qBAAqBC,OAAS,IAAIA,IACpDwE,KAAKH,MAAMwB,SAASrB,KAAKkB,kEAGHV,GACtBR,KAAKO,OAAOC,oCAsFP,IAAA2B,EAAAnC,KAQCoC,EAAmB,CACrBC,MAAO,OACPC,WAAY,OACZC,YAAa,MACbC,UAAW,UAGf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEC,SAAU,WAAYR,MAAO,OAAQS,OAAQ,OAAQC,UAAW,eAC3EN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,QAAQ,WACXT,EAAAC,EAAAC,cAACM,EAAA,EAAME,KAAP,KACIV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACIW,WAAa,CAAC,QAAS,OAAQ,QAAS,IAAK,KAC7CC,WAAa,SAAC9B,EAAKjD,GAAN,OAAY4D,EAAKZ,aAAaC,MAC/CiB,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEC,SAAU,aACrBJ,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAa5H,KAAK,OAAO6H,YAAY,aACxBC,SAAW,SAACpF,GACR4D,EAAKF,SAAS,CAAExG,UAAW8C,EAAEE,OAAOmF,SACpCA,MAAQ5D,KAAK9E,MAAMO,YACpCgH,EAAAC,EAAAC,cAACa,EAAA,EAAWK,OAAZ,KACIpB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQX,QAAQ,UAAUY,QAAU9D,KAAKoB,mBAAzC,YAKhBqB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACIC,QAAShE,KAAK9E,MAAMO,UACpBwI,KArCX,CACT5B,MAAO,OACP6B,WAAY,CACRC,SAAU,IAmCM7F,QAAU0B,KAAKgB,eACfoD,cAAgBpE,KAAKiB,0BAIjCwB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACM,EAAA,EAAMoB,QAAP,KACI5B,EAAAC,EAAAC,cAACM,EAAA,EAAME,KAAP,CAAYP,MAAO,CAACC,SAAS,WAAYC,OAAO,OAAQwB,QAAQ,QAC5D7B,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAACC,SAAS,WAAYC,OAAO,OAAQyB,aAAa,MAAMC,YAAY,MAAOC,YAAY,MAAOC,YAAY,UACnHjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAMC,QAAM,GACRnC,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAcjC,MAAQ,CAAEkC,WAAY,WAApC,4BACArC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYZ,MAAQR,GAChBK,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAa5H,KAAK,OAAO+H,MAAQ5D,KAAK9E,MAAM2G,gBAC/B8B,SACI,SAACpF,GACG,IAAIhC,EAAMD,EAAkBiC,EAAEE,OAAOmF,OACjCA,EAAQhC,WAAWrF,GACnBwI,MAAMnB,KACNA,EAAQ,GAEZzB,EAAKF,SAAS,CAACJ,gBAAgBtF,QAIxDkG,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAcjC,MAAQ,CAAEkC,WAAY,SAAUxC,WAAY,SAA1D,8BACAG,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYZ,MAAQR,GAChBK,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAa5H,KAAK,OAAO+H,MAAQ5D,KAAK9E,MAAM4G,iBAC/B6B,SACI,SAACpF,GACG,IAAIhC,EAAMD,EAAkBiC,EAAEE,OAAOmF,OACjCA,EAAQhC,WAAWrF,GACnBwI,MAAMnB,KACNrH,EAAM,KAEV4F,EAAKF,SAAS,CAACH,iBAAiBvF,UAMjEkG,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACE,OAAO,MAAO0B,YAAY,MAAOE,YAAY,QAASD,YAAY,UAAWO,UAAU,OAAQT,aAAa,UACzH9B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAMC,QAAM,GACRnC,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAcjC,MAAQ,CAAEkC,WAAY,WAApC,iBACArC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYZ,MAAO,CAACN,WAAW,SAC3BG,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAa5H,KAAK,OAAO+H,MAAQ5D,KAAK9E,MAAMgH,kBAIxDO,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAcjC,MAAQ,CAAEoC,UAAW,OAAQF,WAAY,WAAvD,uEA9NFG,aA+OnBC,cANS,SAAAhK,GACpB,MAAO,CACHY,oBAAqBZ,EAAMY,oBAAoBR,UAIxC4J,CAAyBtF,+EC7OlCuF,cAEF,SAAAA,EAAYtF,GAAO,IAAArB,EAAA,OAAAsB,OAAAC,EAAA,EAAAD,CAAAE,KAAAmF,IACf3G,EAAAsB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqF,GAAAhF,KAAAH,KAAMH,KAwBVuF,oBAAsB,SAAC5E,GACnBhC,EAAKyD,SAASnC,OAAOqB,OAAO,GAAI,CAC5BkE,QAAS7E,EAAS6E,QAClBC,IAAK9E,EAAS8E,IACdC,MAAO/E,EAAS+E,MAChBC,SAAWhF,EAASgF,SACpBC,IAAKjF,EAASiF,IACdC,OAASlF,EAASkF,OAClBC,MAAOnF,EAASmF,UAjCLnH,EAqCnBoH,qBAAuB,SAACrH,GACpBC,EAAKyD,SAASnC,OAAOqB,OAAO,GAAI,CAAEkE,QAAS9G,EAAEE,OAAOmF,UAtCrCpF,EAyCnBqH,iBAAmB,SAACtH,GAChBC,EAAKyD,SAASnC,OAAOqB,OAAO,GAAI,CAAEmE,IAAI/G,EAAEE,OAAOmF,UA1ChCpF,EAmDnBsH,oBAAsB,SAACvH,GACnBC,EAAKqB,MAAMkG,sBAAsBvH,EAAKqB,MAAMmG,QApD7BxH,EAuDnByH,iBAAmB,SAAC1H,GAChBC,EAAKqB,MAAMqG,mBAAmB1H,EAAKqB,MAAMmG,QAxD1BxH,EA2DnB2H,kBAAoB,SAAC5H,GACjBC,EAAKqB,MAAMuG,oBAAoB,CAC3BpK,UAAWwC,EAAKtD,MAAMqK,MACtBtJ,QAASuC,EAAKtD,MAAMuK,OA9DTjH,EAkEnB6H,eAAiB,SAAC9H,GACdC,EAAKyD,SAAS,CAAE0D,MAAOpH,EAAEE,OAAO6H,WAhEhC9H,EAAKtD,MAAQ,CACTmK,QAASxF,EAAMwF,QACfC,IAAKzF,EAAMyF,IACXC,MAAO1F,EAAM0F,MACbC,SAAW3F,EAAM2F,SACjBC,IAAK5F,EAAM4F,IACXC,OAAS7F,EAAM6F,OACfC,MAAO9F,EAAM8F,OAGjBnH,EAAK+H,iBAAmB/H,EAAKqB,MAAM0G,iBACnC/H,EAAKgI,eAAiBhI,EAAKqB,MAAM2G,eAdlBhI,yFAqBOgC,GACtBR,KAAKoF,oBAAoB5E,8CAuBViG,EAAWC,GAC1B3I,QAAQC,IAAI,6BACRyI,IAAczG,KAAKH,OACnBG,KAAKH,MAAMnB,eAAesB,KAAKH,MAAOG,KAAK9E,wCAuB1C,IAAAiH,EAAAnC,KACC2G,EAAiB,CACnBtE,MAAO,QACPC,WAAY,MACZC,YAAa,MACbC,UAAW,UAGToE,EAAgB,CAClBvE,MAAO,OACPS,OAAQ,OACR+D,OAAQ,QAGZ,OACQpE,EAAAC,EAAAC,cAACM,EAAA,EAAME,KAAP,CAAYP,MACJ,CACIC,SAAU,WACViE,WAAY,UACZxC,QAAS,MACTxB,OAAQ,OACR0B,YAAaxE,KAAKH,MAAMkH,MAAQ,MAAQ,MACxCtC,YAAa,MACbC,YAAa,SACb3B,UAAW,eAGnBN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,SAAS,WAAYR,MAAM,OAAQqC,YAAY,QAASD,YAAY,UAAWD,YAAY,SACxG/B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,SAAS,WAAYmC,UAAU,UAC5CvC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACoE,MAAO,OAAQnE,SAAS,WAAYP,WAAW,OAAQoC,YAAY,QAASD,YAAY,MAAOD,YAAY,MAAO1B,OAAO,SAClIL,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEoE,MAAO,OAAQ3E,MAAM,OAAQqC,YAAY,QAASD,YAAY,MAAOD,YAAY,QACtE,GAApBxE,KAAKH,MAAMmG,OACTvD,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQoD,OAAO,QAAQnD,QAAU9D,KAAK8F,qBAClCrD,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAWC,MAAM,WAGzB1E,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQjB,MAAO,CAACoC,UAAU,OAAQiC,OAAO,QAAQnD,QAAU9D,KAAKiG,kBAC5DxD,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAWC,MAAM,WAGzB1E,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEC,SAAS,WAAYmE,MAAO,OAAQlE,OAAQ,OAAQ4B,YAAY,QAASD,YAAY,MAAOD,YAAY,QACnH/B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAMC,QAAM,GACRnC,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYZ,MAAQ+D,GAChBlE,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAa5H,KAAK,OACL+H,MACI5D,KAAK9E,MAAMsK,SAEf7B,SACI,SAACpF,GACG4D,EAAKF,SAASnC,OAAOqB,OAAO,GAAI,CAAEqE,SAAUjH,EAAEE,OAAOmF,UAG7DwD,OACI,SAAC7I,GACG,IAAI3B,EAAMa,EAAec,EAAEE,OAAOmF,OAC9BrH,EAAMI,EAAkBC,GAC5BuF,EAAKF,SAASnC,OAAOqB,OAAO,GAAI,CAAEoE,MAAO3I,EAAK4I,SAAWjJ,KACzD4F,EAAKoE,kBAAoBpE,EAAKoE,iBAAiBpE,EAAKtC,MAAMmG,QAGlEqB,WAAY,SAAC9I,GACT,GAAmB,KAAfA,EAAE+I,SAAiB,CACnB,IAAI/K,EAAM4F,EAAKjH,MAAMsK,SACjB5I,EAAMa,EAAelB,GACzB4F,EAAKF,SAASnC,OAAOqB,OAAO,GAAI,CAAEoE,MAAO3I,EAAK4I,SAAWjJ,KACzD4F,EAAKoF,2BAK9B9E,EAAAC,EAAAC,cAACkC,EAAA,EAAD,UACApC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYZ,MAAQ+D,GAChBlE,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAa5H,KAAK,OAAO+H,MAAQ5D,KAAK9E,MAAMwK,OACvC/B,SACG,SAACpF,GACG4D,EAAKF,SAASnC,OAAOqB,OAAO,GAAI,CAAEuE,OAAQnH,EAAEE,OAAOmF,UAG1DwD,OACI,SAAC7I,GACG,IAAI3B,EAAMa,EAAec,EAAEE,OAAOmF,OAC9BhH,EAAMuF,EAAKjH,MAAMqK,QACjB3I,EAAMuF,EAAKjH,MAAMqK,OAErB,IAAIhJ,EAAMI,EAAkBC,GAC5BuF,EAAKF,SAASnC,OAAOqB,OAAO,GAAI,CAAEsE,IAAK7I,EAAK8I,OAASnJ,KACrD4F,EAAKqE,gBAAkBrE,EAAKqE,eAAerE,EAAKtC,MAAMmG,QAG9DqB,WAAY,SAAC9I,GACT,GAAmB,KAAfA,EAAE+I,SAAiB,CACnB,IAAI/K,EAAM4F,EAAKjH,MAAMwK,OACjB9I,EAAMa,EAAelB,GACrBK,EAAMuF,EAAKjH,MAAMqK,QACjB3I,EAAMuF,EAAKjH,MAAMqK,OAErBhJ,EAAMI,EAAkBC,GACxBuF,EAAKF,SAASnC,OAAOqB,OAAO,GAAI,CAAEsE,IAAK7I,EAAK8I,OAASnJ,KACrD4F,EAAKqE,gBAAkBrE,EAAKqE,eAAerE,EAAKtC,MAAMmG,cAQ/EvD,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAU5E,MAAQ,CAAEN,WAAY,OAAUgE,QAAUtG,KAAK9E,MAAMyK,MACrDhC,SAAW3D,KAAKqG,gBAD1B,aAGJ5D,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEoE,MAAO,OAAQ3E,MAAO,QAASE,YAAY,OAAQgC,aAAa,OAAQxB,UAAW,aAAcyB,YAAY,MAAOC,YAAY,MAAOC,YAAY,UAC9JjC,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAab,MAAQgE,EAAgBa,eAAe,WAAW/D,YAAY,GAC9DE,MAAQ5D,KAAK9E,MAAMmK,QAAU1B,SAAW3D,KAAK4F,uBAC1DnD,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEoC,UAAW,SAC1BvC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAab,MAAQgE,EAAgBa,eAAe,WAAW/D,YAAY,GAC9DE,MAAO5D,KAAK9E,MAAMoK,IAAK3B,SAAU3D,KAAK6F,oBAEvDpD,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAACC,SAAS,WAAYmE,MAAO,QAASU,MAAO,OAAQlD,YAAY,MAAOC,YAAY,MAAOC,YAAY,UAEhHjC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQoD,OAAO,QAAQrE,MAAO,CAACN,WAAW,OAAQwB,QAAU9D,KAAKmG,mBAAjE,mBAjMIwB,IAAM1C,WAApCE,EAmBKyC,aAAe,CAClBC,UAAW,KAsLJ1C,kCCpNF2C,EAAc,SAACC,GACxBC,uBAAa,CACTC,SAAU,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACHC,EAAiB,CACnBC,QAAS,QAAS/F,WAAY,OAAQC,YAAa,QAGvD,OACIE,EAAAC,EAAAC,cAAA,OAAK2F,UAAU,aACX7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAOrF,QAAQ,QACXT,EAAAC,EAAAC,cAAA,OAAKC,MAAOwF,GACR3F,EAAAC,EAAAC,cAAA,2BAEJF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAC0B,QAAQ,SACrB7B,EAAAC,EAAAC,cAAA,SAAIoF,GACJtF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAC0B,QAAQ,UACrB7B,EAAAC,EAAAC,cAAA,OAAKC,MAAOwF,GACR3F,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQX,QAAQ,OAAOY,QAASqE,GAAhC,4CCVxBzI,GAAIC,EAAQ,IACZ6I,GAAS7I,EAAQ,KACjB8I,GAAU9I,EAAQ,KAEhB+I,eA2BF,SAAAA,EAAY7I,GAAO,IAAArB,EAAA,OAAAsB,OAAAC,EAAA,EAAAD,CAAAE,KAAA0I,IACflK,EAAAsB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4I,GAAAvI,KAAAH,KAAMH,KA1BVQ,aAAe,CACXpF,yBAA0B,CACtBM,qBAAsB,CAClBC,OAAQ,KACRC,UAAW,MAEfC,0BAA2B,CACvBF,OAAQ,KACRG,KAAM,QAiBC6C,EAZnB4B,aAAe,CACXrE,eAAgB,CACZP,OAAQ,KACRQ,UAAW,KACXC,QAAS,OAQEuC,EAJnBmK,IAAM,KAIanK,EAHnBoK,QAAU,KAGSpK,EAFnBqK,WAAa,KAEMrK,EAiBnBsK,oBAAsB,SAACC,GACnB,IACI,IAAIC,EAAUC,KAAKC,MAAMT,GAAQU,SAASJ,EAAS,CAAEK,SAAS,EAAMC,OAAQ,KAC5EtL,QAAQC,IAAIgL,GACZ,IAAIM,EAAa,GACbN,EAAQM,YAAcN,EAAQM,WAAWC,MAAQP,EAAQM,WAAWC,KAAKnO,OAAS,IAClF4N,EAAQM,WAAWC,KAAKC,IAAI,SAAAjL,GACxB,IAAIkL,EAAalL,EAAEmL,YAWnB,OAVAnL,EAAEoL,IAAM/H,WAAW6H,EAAWE,KAC9BpL,EAAEgH,MAAQ3D,WAAW6H,EAAWlE,OAChChH,EAAEkH,IAAMlH,EAAEgH,MAAQhH,EAAEoL,IACpBpL,EAAEiH,SAAW7I,EAAkB4B,EAAEgH,OACjChH,EAAEmH,OAAS/I,EAAkB4B,EAAEkH,KAC/BlH,EAAEoH,MAAgC,SAAxB8D,EAAWG,SACrBrL,EAAE8G,QAAU9G,EAAEsL,MACdtL,EAAE+G,SAAyBjK,IAAnBoO,EAAWnE,IAAoB,GAAKmE,EAAWnE,WAChD/G,EAAEmL,mBACFnL,EAAEsL,MACFtL,IAEX+K,EAAaN,EAAQM,WAAWC,MAEpCxL,QAAQC,IAAIsL,GACZ9K,EAAKyD,SAAS,CAAEqH,WAAYA,IAC5B9K,EAAKsL,KAAKC,aAAanG,MAAQ,GACjC,MAAOrF,GACLuJ,EAAY,qEA3CDtJ,EAuDnB+B,OAvDmB,eAAA2H,EAAApI,OAAAkK,EAAA,EAAAlK,CAAAmK,EAAAvH,EAAAwH,KAuDV,SAAAC,EAAO3J,GAAP,IAAA4J,EAAAC,EAAAf,EAAAgB,EAAAC,EAAA,OAAAN,EAAAvH,EAAA8H,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACL5M,QAAQC,IAAIwC,GAER4J,EAA0B5J,EAASvF,yBAAyBM,qBAC5D8O,EAA8B7L,EAAK6B,aAAapF,yBAAyBM,sBAEzEqC,EAAgByM,EAA4B7O,OAAQ4O,EAAwB5O,QAN3E,CAAAiP,EAAAE,KAAA,YAODnM,EAAKoM,aAAY,GACjBpM,EAAK6B,aAAapF,yBAAyBM,qBAAuBmE,GAAEiB,MAAMyJ,GAC1ErM,QAAQC,IAAIoM,EAAwB3O,WACM,OAAtC2O,EAAwB3O,UAV3B,CAAAgP,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAY8BnM,EAAKqM,mBAAmBT,EAAwB3O,WAZ9E,QAagC,IADrB6N,EAZXmB,EAAAK,MAasB1P,SACXkO,EAAW,GAAK,CACZ/D,MAAO,EACPoE,IAAK,EACLlE,IAAK,EACLD,SAAU7I,EAAkB,GAC5B+I,OAAQ/I,EAAkB,GAC1B0I,QAAS,GACTM,OAAO,EACPoB,OAAO,EACPzB,IAAK,KAGb9G,EAAKyD,SAAS,CAAEqH,WAAYA,IAC5BvL,QAAQC,IAAIsL,GACZ9K,EAAKoM,aAAY,GA5BxBH,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SA8BO3C,EAAY,sEACZtJ,EAAKoM,aAAY,GA/BxB,eAAAH,EAAAO,OAAA,qBAuCDV,EAA+B9J,EAASvF,yBAAyBS,0BACjE6O,EAAmC/L,EAAK6B,aAAapF,yBAAyBS,2BAC9EkC,EAAgB2M,EAAiC/O,OAAQ8O,EAA6B9O,QAzCrF,CAAAiP,EAAAE,KAAA,gBA0CDnM,EAAK6B,aAAapF,yBAAyBS,0BAA4BgE,GAAEiB,MAAM2J,GACrC,OAAtCA,EAA6B3O,MAC7B6C,EAAKyM,sBAAsBX,EAA6B3O,KAAM2O,EAA6B3O,KAAO,GA5CrG8O,EAAAO,OAAA,mCAAAP,EAAAS,SAAAf,EAAAnK,KAAA,aAvDU,gBAAAmL,GAAA,OAAAjD,EAAAkD,MAAApL,KAAA7E,YAAA,GAAAqD,EAyGnB6M,sBAAwB,SAAC9M,GACrB,IAAI+M,EAAQ9M,EAAK6B,aAAapF,yBAAyBM,qBAAqBE,UACxEsN,EAAUvK,EAAK+M,4BACfC,EAAO,IAAIC,KAAK,CAAC1C,GAAU,CAAClN,KAAM,eACtC2C,EAAKoK,QAAQ8C,KAAOC,IAAIC,gBAAgBJ,GACxChN,EAAKoK,QAAQiD,SAAb,GAAAC,OAA2BR,EAA3B,QACA9M,EAAKoK,QAAQmD,SA/GEvN,EAkHnBwN,sBAAwB,SAACzN,GACrBC,EAAKsL,KAAKC,aAAagC,SAnHRvN,EAsHnByN,aAAe,SAAC1N,GACZA,EAAE2N,kBACF3N,EAAE4N,iBACF,IAAIX,EAAOjN,EAAEE,OAAO2N,MAAM,GACtBZ,GACAhN,EAAKqK,WAAWwD,WAAWb,IA3HhBhN,EA8HnB+M,0BAA4B,WACxB,IAAIe,EAAa,CACbC,YAAe,CACX9C,WAAc,CACV+C,QAAW,MACXC,SAAY,UAGpBC,SAAY,CACR,CACI7Q,KAAQ,UACR8Q,KAAQ,aACRD,SAAY,MAIpBE,EAAG9M,OAAA+M,EAAA,EAAA/M,CAAOtB,EAAKtD,MAAMoO,YACrBoD,EAAWJ,EAAWI,SAAS,GAAGA,SAsBtC,OArBAE,EAAIE,QAAQ,SAAAvO,GACRR,QAAQC,IAAIO,EAAE+G,KACd,IAAIyH,EAAM,CACNlR,KAAQ,UACR8Q,KAAQ,OACRlD,WAAc,CACVlE,MAAShH,EAAEgH,MAAMjI,WACjBqM,KAAQpL,EAAEkH,IAAMlH,EAAEgH,OAAOjI,WACzBsM,SAAYrL,EAAEoH,MAAMrI,WACpBgI,IAAO/G,EAAE+G,KAEboH,SAAY,CACR,CACI7Q,KAAQ,OACR0N,KAAQhL,EAAE8G,WAItBqH,EAASjN,KAAKsN,KAGXtE,GAAQuE,SAASV,EAAY,CAAClD,SAAS,EAAO6D,eAAe,EAAM5D,OAAQ,KArKnE7K,EAwKnB0C,aAAe,WACX,MAAO,CAAErF,KAAM,iBAAkBP,QAASwE,OAAOqB,OAAO,GAAIzB,GAAEiB,MAAMnC,EAAK4B,iBAzK1D5B,EA4KnB0O,WAAa,SAACC,GAEV,OADA3O,EAAKmK,IAAIyE,UAAYD,EACiB,IAA/B3O,EAAKmK,IAAI0E,WAAWjS,OAAe,GAAKoD,EAAKmK,IAAI0E,WAAW,GAAGC,WA9KvD9O,EAiLnBqM,mBAjLmB,eAAA0C,EAAAzN,OAAAkK,EAAA,EAAAlK,CAAAmK,EAAAvH,EAAAwH,KAiLE,SAAAsD,EAAO/R,GAAP,IAAAmD,EAAA0K,EAAA,OAAAW,EAAAvH,EAAA8H,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EACA+C,IAAK,2CAAA5B,OAA6CrQ,EAA7C,YAAmE,CAAEkS,OAAQ,QAASC,KAAK,SAAAC,GAC7G,OAAOA,EAAStE,SACjBqE,KAAK,SAAArE,GACJ,OAAOA,IAJM,UAOJ,MANT3K,EADa6O,EAAA3C,MAAA,CAAA2C,EAAA9C,KAAA,eAAA8C,EAAAzC,OAAA,SAQN,IARM,cAAAyC,EAAA9C,KAAA,EAWQ,IAAImD,QAAQ,SAACC,EAASC,GAAV,OAAqBxF,GAAOyF,YAAYrP,EAAM,SAACsP,EAAKC,GACjFD,EACAF,EAAOE,GAEPH,EAAQI,EAAO7E,WAAWC,UAfjB,cAWXD,EAXWmE,EAAA3C,MAkBNtB,IAAI,SAAAuD,GAYX,OAXAA,EAAIxH,MAAQ3D,WAAWmL,EAAIqB,EAAE7I,OAC7BwH,EAAIpD,IAAM/H,WAAWmL,EAAIqB,EAAEzE,KAC3BoD,EAAItH,IAAMsH,EAAIxH,MAAQwH,EAAIpD,IAC1BoD,EAAIvH,SAAW7I,EAAkBoQ,EAAIxH,OACrCwH,EAAIrH,OAAS/I,EAAkBoQ,EAAItH,KACnCsH,EAAI1H,QAAU7G,EAAK0O,WAAWH,EAAIrN,GAClCqN,EAAIpH,OAAQ,EACZoH,EAAIhG,OAAQ,EACZgG,EAAIzH,IAAM,UACHyH,EAAIqB,SACJrB,EAAIrN,EACJqN,IA9BMU,EAAAzC,OAAA,SAiCV1B,GAjCU,yBAAAmE,EAAAvC,SAAAsC,EAAAxN,SAjLF,gBAAAqO,GAAA,OAAAd,EAAAnC,MAAApL,KAAA7E,YAAA,GAAAqD,EAqNnB8P,sBAAwB,SAAC9Q,GACrBO,QAAQC,IAAI,yBAA2BR,GACvCO,QAAQC,IAAIQ,EAAKtD,MAAMoO,YACvB9K,EAAKyD,SAAS,CACVqH,WAAYxJ,OAAA+M,EAAA,EAAA/M,CAAItB,EAAKtD,MAAMoO,YAAYiF,OAAO,SAACxB,EAAKyB,GAChD,OAAOA,IAAQhR,OA1NRgB,EAmOnBiQ,mBAAqB,SAACjR,GAClBO,QAAQC,IAAI,sBACZ,IAAI0Q,EAAQlQ,EAAKtD,MAAMoO,WAAW9L,GAE9BmR,EAAOnR,EAAIgB,EAAKtD,MAAMoO,WAAWlO,OAAO,EAAIoD,EAAKtD,MAAMoO,WAAW9L,EAAE,GAAK,KACzEmM,EAAe,OAATgF,EAAe,EAAIA,EAAKpJ,MAAQmJ,EAAMjJ,IAE5CmJ,EAAgB,CAChBjF,IAAKA,EACLpE,MAAOmJ,EAAMjJ,IACbA,IAAKiJ,EAAMjJ,IAAMkE,EACjBnE,SAAU7I,EAAkB+R,EAAMnJ,OAClCG,OAAQ/I,EAAkB+R,EAAMjJ,KAChCJ,QAAS,GACTM,OAAO,GAEPkJ,EAAM/O,OAAA+M,EAAA,EAAA/M,CAAOtB,EAAKtD,MAAMoO,YAC5BuF,EAAOzP,OAAO5B,EAAE,EAAG,EAAGoR,GACtBC,EAAOnS,OACP8B,EAAKyD,SAAS,CAAEqH,WAAauF,KAtPdrQ,EAyPnByM,sBAAwB,SAAC1F,EAAOE,GAC5B,IAAImJ,EAAgB,CAChBrJ,MAAOA,EACPE,IAAKA,EACLkE,IAAKlE,EAAMF,EACXC,SAAU7I,EAAkB4I,GAC5BG,OAAQ/I,EAAkB8I,GAC1BJ,QAAS,GACTC,IAAK,GACLK,OAAO,GAEX5H,QAAQC,IAAI,yBACZ,IAAI6Q,EAAM/O,OAAA+M,EAAA,EAAA/M,CAAOtB,EAAKtD,MAAMoO,YAC5BuF,EAAOpP,KAAKmP,GACZC,EAASrQ,EAAKsQ,mBAAmBD,GACjCrQ,EAAKyD,SAAS,CAAEqH,WAAYuF,KAxQbrQ,EA2QnBoC,UAAY,SAACmO,GACTvQ,EAAK4B,aAAarE,eAAeP,OAASA,MAC1CgD,EAAK4B,aAAarE,eAAeC,UAAY+S,EAAU/S,UACvDwC,EAAK4B,aAAarE,eAAeE,QAAU8S,EAAU9S,QACrDuC,EAAKqB,MAAMwB,SAAS7C,EAAK0C,iBA/QV1C,EAkRnBE,eAAiB,SAACmB,EAAO3E,GACrB,IAAIuD,EAASqB,OAAA+M,EAAA,EAAA/M,CAAItB,EAAKtD,MAAMoO,YAAYE,IAAI,SAACjL,EAAGf,GAW5C,OAVIA,IAAMqC,EAAMmG,QACZjI,QAAQC,IAAI9C,GACZqD,EAAE8G,QAAUnK,EAAMmK,QAClB9G,EAAE+G,IAAMpK,EAAMoK,IACd/G,EAAEgH,MAAQrK,EAAMqK,MAChBhH,EAAEiH,SAAWtK,EAAMsK,SACnBjH,EAAEkH,IAAMvK,EAAMuK,IACdlH,EAAEmH,OAASxK,EAAMwK,OACjBnH,EAAEoH,MAAQzK,EAAMyK,OAEbpH,IAEXE,EAASD,EAAKsQ,mBAAmBrQ,GACjCD,EAAKyD,SAAS,CAAEqH,WAAY7K,KAjSbD,EAoSnBsQ,mBAAqB,SAACE,GAClB,OAAIA,EAAY5T,OAAS,EACd4T,GACXA,EAAYC,KAAK,SAACvM,EAAGwM,GAAJ,OAAUxM,EAAE6C,MAAQ2J,EAAE3J,QAChCyJ,IAxSQxQ,EA2SnB+H,iBAAmB,SAACP,KA3SDxH,EA8SnBgI,eAAiB,SAACR,KA5SdxH,EAAKtD,MAAQ,CACToO,WAAY,GACZ6F,SAAU,GACVC,SAAS,GAEb5Q,EAAK+B,OAAS/B,EAAK+B,OAAO8O,KAAZvP,OAAAwP,EAAA,EAAAxP,QAAAwP,EAAA,EAAAxP,CAAAtB,KACdA,EAAKqM,mBAAqBrM,EAAKqM,mBAAmBwE,KAAxBvP,OAAAwP,EAAA,EAAAxP,QAAAwP,EAAA,EAAAxP,CAAAtB,KAC1BA,EAAKmK,IAAM4G,SAAS5M,cAAc,OAClCnE,EAAKoK,QAAU2G,SAAS5M,cAAc,KACtCnE,EAAKqK,WAAa,IAAI2G,WACtBhR,EAAKqK,WAAW4G,OAAS,WACrBjR,EAAKsK,oBAAoBtK,EAAKqK,WAAWsF,SAb9B3P,yFA+COgC,GACtBR,KAAKO,OAAOC,uCAGJoD,GACR5D,KAAKiC,SAAS,CAACmN,QAAUxL,+CA2KV6C,EAAWC,EAAWgJ,GACrC3R,QAAQC,IAAIgC,KAAK9E,MAAMoO,6CAiFlB,IAAAnH,EAAAnC,KACL,OACIyC,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEC,SAAU,WAAYP,WAAY,QAASqN,SAAU,QAAStN,MAAM,SAC/EI,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,QAAQ,UAAUN,MAAQ,CAAEE,OAAQ,SACvCL,EAAAC,EAAAC,cAACM,EAAA,EAAMoB,QAAP,CAAezB,MAAQ,CAAEgN,SAAU,SAAnC,aAIK5P,KAAK9E,MAAMkU,SACZ3M,EAAAC,EAAAC,cAACM,EAAA,EAAME,KAAP,CAAYP,MAAQ,CAChBC,SAAU,WACVE,UAAW,aACXD,OAAQ,QACRwB,QAAS,QAET7B,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CACTiN,SAAU,SACV/M,OAAQ,OACR0B,YAAa,MACbC,YAAa,QACbC,YAAa,KAGT1E,KAAK9E,MAAMoO,WAAWE,IAAI,SAACuD,EAAKvP,GAC5B,OAAOiF,EAAAC,EAAAC,cAACmN,EAAD,CACHtO,IAAMhE,EAEN6H,QAAU0H,EAAI1H,QACdW,MAAQxI,EACR+H,MAAQwH,EAAIxH,MACZC,SAAUuH,EAAIvH,SACdC,IAAMsH,EAAItH,IACVC,OAAQqH,EAAIrH,OACZC,MAAQoH,EAAIpH,MACZoB,MAAQgG,EAAIhG,MACZzB,IAAMyH,EAAIzH,IAEV5G,eAAiByD,EAAKzD,eACtBwH,mBAAqB/D,EAAKsM,mBAC1B1I,sBAAwB5D,EAAKmM,sBAC7BlI,oBAAsBjE,EAAKvB,UAC3B2F,iBAAkBpE,EAAKoE,iBACvBC,eAAiBrE,EAAKqE,qBAO5CxG,KAAK9E,MAAMkU,SACT3M,EAAAC,EAAAC,cAACM,EAAA,EAAME,KAAP,CACIP,MAAQ,CACJC,SAAU,WACVE,UAAW,aACXD,OAAQ,QACRwB,QAAS,QAGb7B,EAAAC,EAAAC,cAAA,OACIC,MAAQ,CACJC,SAAU,WACVkN,IAAK,MACLC,KAAM,MACNC,UAAW,0BAEfxN,EAAAC,EAAAC,cAACuN,GAAAxN,EAAD,CACI7G,KAAK,OACLsU,MAAM,UACNrN,OAAO,MACPT,MAAM,WAM1BI,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACM,EAAA,EAAMoB,QAAP,KACI5B,EAAAC,EAAAC,cAACM,EAAA,EAAME,KAAP,CAAYP,MAAO,CAACC,SAAS,WAAYC,OAAO,OAAQwB,QAAQ,QAC5D7B,EAAAC,EAAAC,cAAA,SAAOgB,SAAU3D,KAAKiM,aAAcpQ,KAAK,OAAOuU,GAAG,OAAOC,IAAI,eAAezN,MAAO,CAACyF,QAAS,UAC9F5F,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAACC,SAAS,WAAYC,OAAO,OAAQyB,aAAa,MAAMC,YAAY,MAAOC,YAAY,MAAOC,YAAY,UACnHjC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQjB,MAAO,CAACC,SAAS,WAAYmE,MAAM,SAAUC,OAAO,QAAQnD,QAAS9D,KAAKqL,uBAAlF,UACA5I,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQjB,MAAO,CAACC,SAAS,WAAYmE,MAAM,QAASzE,YAAY,OAAQ0E,OAAO,QAAQnD,QAAS9D,KAAKgM,uBAArG,uBA9ZP/G,aAibdC,eANS,SAAAhK,GACpB,MAAO,CACHD,yBAA0BC,EAAMD,yBAAyBK,UAIlD4J,CAAyBwD,IChbzB4H,oLAXP,OACI7N,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAACC,SAAS,WAAYR,MAAM,UACrCI,EAAAC,EAAAC,cAAC4N,EAAD,OAEJ9N,EAAAC,EAAAC,cAAC6N,GAAD,cAPEvL,aCMdwL,GAAclB,SAASmB,eAAe,QAEpCC,GAAQC,YAAYC,EAAaC,YAAgBC,MAEvDC,iBACIvO,EAAAC,EAAAC,cAACsO,EAAA,EAAD,CAAUN,MAAOA,IACblO,EAAAC,EAAAC,cAACuO,GAAD,OAEJT","file":"static/js/main.7799b28e.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport moment from 'moment';\n\nconst createYoutubePayload = () => {\n    return {\n        payload: {\n            youtubeIdUpdateEvent: {\n                moment: moment(),\n                youtubeId: null,\n            },\n            addSubtitleBeginTimeEvent: {\n                moment: null,\n                time: null,\n            },\n        },\n    };\n};\n\nconst youtubePlayerBorderEvent = (state = createYoutubePayload(), action) => {\n    switch (action.type) {\n        case 'YoutubePlayerBorder':\n            return { payload: action.payload };\n    }\n    return state;\n};\n\nconst createSubtitleBorderPayload = () => {\n    return {\n        payload: {\n            playPhaseEvent: {\n                moment: null,\n                startTime: null,\n                endTime: null\n            }\n        },\n    }\n};\n\nconst subtitleBorderEvent = (state = createSubtitleBorderPayload(), action) => {\n    switch (action.type) {\n        case 'SubtitleBorder':\n            return { payload: action.payload };\n    }\n    return state;\n};\n\nexport default combineReducers({\n    youtubePlayerBorderEvent,\n    subtitleBorderEvent,\n});\n","/*\n -1(시작되지 않음)\n 0(종료됨)\n 1(재생 중)\n 2(일시중지됨)\n 3(버퍼링 중)\n 5(동영상 신호)\n* */\nconst NOT_STARTED = -1;\nconst ENDED = 0;\nconst PLAYING = 1;\nconst PAUSED = 2;\nconst BUFFERING = 3;\nconst CUED = 5;\nexport { NOT_STARTED, ENDED, PLAYING, PAUSED, BUFFERING, CUED };\n\n","export const filterToNumberStr = (str) => {\n    let re = /[0-9.]+/g;\n    str = (str.match(re) || []).join('');\n    let split = str.split('.');\n    if (split.length > 1) {\n        str = split[0] + \".\" + split[1];\n    }\n    return str;\n}\n","import moment from 'moment';\n\nexport const formatToHHmmss_ss = (sec) => {\n    let longValue = sec * 1000;\n    let duration = moment.duration(longValue);\n    let str = '';\n    str += duration.hours() >= 10 ? duration.hours() + ':' : '0' + duration.hours() + ':';\n    str += duration.minutes() >= 10 ? duration.minutes() + ':' : '0' + duration.minutes() + ':';\n    str += duration.seconds() >= 10 ? duration.seconds() + '.' : '0' + duration.seconds() + '.';\n    let millisecondsStr = Math.floor(duration.milliseconds()).toString();\n    const len = millisecondsStr.length;\n    for (var i = 0; i < 3-len; i++) {\n        millisecondsStr = \"0\" + millisecondsStr;\n    }\n    str += millisecondsStr;\n    // console.log('formatToHHmmss_ss');\n    return str;\n};\n\nexport const parseHHmmss_ss = (str) => {\n    let split = str.split(\".\");\n    if (split.length === 2 && split[1].length > 3) {\n        str = split[0] + \".\" + split[1].substring(0, 3);\n    }\n    let longValue = moment.duration(str).valueOf();\n    return longValue / 1000;\n};\n\nexport const isUpdatedMoment = (currentMoment, newMoment) => {\n    console.log(currentMoment);\n    console.log(newMoment);\n    if (newMoment === null)\n        return false;\n    if (currentMoment === null || currentMoment < newMoment)\n        return true;\n    return false;\n};\n","import { NOT_STARTED, CUED, PAUSED, PLAYING } from '../../const/YoutubePlayerState';\n\nexport default class ProgressPublisher {\n\n    progressTimeId = null;\n    youtubePlayer = null;\n    onProgressCallback = null;\n\n    eventQueue = [];\n\n    onReady = (e) => {\n        this.youtubePlayer = e.target;\n    };\n\n    onStateChanged = (e) => {\n        let that = this;\n\n        if (e.data === PLAYING) {\n            this.progressTimeId = setInterval(function() {\n                if (that.youtubePlayer) {\n                    let currentTime = that.youtubePlayer.getCurrentTime();\n                    if (that.onProgressCallback)\n                        that.onProgressCallback(currentTime);\n                    if (that.eventQueue.length > 0) {\n                        let found = that.eventQueue.find(e => {\n                            return currentTime >= e.targetTime;\n                        });\n                        if (found !== undefined) {\n                            found.callback();\n                            that.eventQueue.splice(that.eventQueue.indexOf(found), 1);\n                        }\n                    }\n                }\n            }, 10);\n        } else {\n            clearTimeout(this.progressTimeId);\n        }\n    };\n\n    setOnProgress = (callback) => {\n        this.onProgressCallback = callback;\n    };\n\n    setAlarm = (targetTime, callback) => {\n        this.eventQueue.push({\n            targetTime: targetTime,\n            callback: callback\n        });\n    }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport YouTube from 'react-youtube';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { NOT_STARTED, CUED, PAUSED, PLAYING } from '../../const/YoutubePlayerState';\nimport { FormGroup, FormControl, InputGroup, Panel, Button, PanelGroup, ControlLabel, Form } from 'react-bootstrap';\nimport moment from 'moment';\nimport { filterToNumberStr } from '../../util/util-string';\nimport { isUpdatedMoment } from '../../util/util-moment'\nimport ProgressPublisher from './progressPublisher'\nvar _ = require('underscore');\n\nclass YoutubePlayerBorder extends Component {\n\n    youtubePlayer = null;\n    // progressTimeId = null;\n    sendingEvent = {\n        youtubeIdUpdateEvent: {\n            moment: null,\n            youtubeId: null,\n        },\n        addSubtitleBeginTimeEvent: {\n            moment: null,\n            time: null,\n        },\n    };\n\n    currentEvent  = {\n        subtitleBorderEvent: {\n            playPhaseEvent: {\n                moment: null,\n                startTime: null,\n                endTime: null\n            }\n        }\n    };\n\n    progressPublisher = new ProgressPublisher();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            youtubeId: 'kze1JkPl5_8',\n            preSeekInterval: \"1\",\n            nextSeekInterval: \"1\",\n            progressTime: 0,\n        };\n\n        this.progressPublisher.setOnProgress(this.onProgress);\n    }\n\n    componentWillMount() {\n        this.sendingEvent.youtubeIdUpdateEvent.youtubeId = this.state.youtubeId;\n        this.sendingEvent.youtubeIdUpdateEvent.moment = new moment();\n        this.props.dispatch(this.createAction());\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.update(newProps);\n    }\n\n    update = (newProps) => {\n        let curPlayPhaseEvent = this.currentEvent.subtitleBorderEvent.playPhaseEvent;\n        let newPlayPhaseEvent = newProps.subtitleBorderEvent.playPhaseEvent;\n        if (isUpdatedMoment(curPlayPhaseEvent.moment, newPlayPhaseEvent.moment)) {\n            this.currentEvent.subtitleBorderEvent.playPhaseEvent = _.clone(newPlayPhaseEvent);\n            this.playPhase(newPlayPhaseEvent.startTime, newPlayPhaseEvent.endTime);\n        }\n    };\n\n    playPhase = (startTime, endTime) => {\n        this.youtubePlayer.seekTo(startTime);\n        this.youtubePlayer.playVideo();\n        this.progressPublisher.setAlarm(endTime, ()=>{\n            this.youtubePlayer.pauseVideo();\n        });\n    }\n\n    onYoutubeReady = (e) => {\n        this.youtubePlayer = e.target;\n        this.progressPublisher.onReady(e);\n    };\n\n    onYoutubeStateChanged = (e) => {\n        this.progressPublisher.onStateChanged(e);\n    }\n\n    createAction = () => {\n        return { type: 'YoutubePlayerBorder', payload: Object.assign({}, _.clone(this.sendingEvent)) }\n    };\n\n    onLoadButtonClick = (e) => {\n        this.sendingEvent.youtubeIdUpdateEvent.moment = new moment();\n        this.sendingEvent.youtubeIdUpdateEvent.youtubeId = this.state.youtubeId;\n        this.props.dispatch(this.createAction());\n        this.youtubePlayer.cueVideoById(this.state.youtubeId);\n    };\n\n    onKeyPressed = (key) => {\n        if (this.youtubePlayer === null)\n            return;\n\n        let playerState = this.youtubePlayer.getPlayerState();\n\n        switch (key) {\n            case 'space':\n                // console.log(playerState);\n                if (playerState === CUED) {\n                    this.youtubePlayer.playVideo();\n                } else if (playerState === NOT_STARTED || playerState === PAUSED) {\n                    this.youtubePlayer.playVideo();\n                } else if (playerState === PLAYING) {\n                    this.youtubePlayer.pauseVideo();\n                }\n                break;\n            case 'left':\n                if (playerState === PLAYING || playerState === PAUSED) {\n                    let seek = this.youtubePlayer.getCurrentTime() - parseFloat(this.state.preSeekInterval);\n                    this.youtubePlayer.pauseVideo();\n                    this.youtubePlayer.seekTo(seek);\n                }\n                break;\n            case 'right':\n                if (playerState === PLAYING || playerState === PAUSED) {\n                    let seek = this.youtubePlayer.getCurrentTime() + parseFloat(this.state.nextSeekInterval);\n                    this.youtubePlayer.pauseVideo();\n                    this.youtubePlayer.seekTo(seek);\n                }\n                break;\n            case 'a':\n            case 'A':\n                if (playerState === PLAYING || playerState === PAUSED) {\n                    this.sendingEvent.addSubtitleBeginTimeEvent.moment = new moment();\n                    this.sendingEvent.addSubtitleBeginTimeEvent.time = this.youtubePlayer.getCurrentTime();\n                    this.props.dispatch(this.createAction());\n                }\n                break;\n        }\n    };\n\n    onProgress = (curTime) => {\n        this.setState({progressTime: curTime});\n    }\n\n    render() {\n        const opts = {\n            width: '100%',\n            playerVars: { // https://developers.google.com/youtube/player_parameters\n                autoplay: 0,\n            },\n        };\n\n        const offsetInputStyle = {\n            width: '50px',\n            marginLeft: '15px',\n            marginRight: '5px',\n            textAlign: 'center',\n        };\n\n        return (\n            <div style={ { position: 'relative', width: '100%', height: 'auto', boxSizing: 'border-box' } }>\n                <PanelGroup>\n                    <Panel bsStyle=\"primary\">\n                        <Panel.Body>\n                            <KeyboardEventHandler\n                                handleKeys={ ['space', 'left', 'right', 'a', 'A'] }\n                                onKeyEvent={ (key, e) => this.onKeyPressed(key) }/>\n                            <div style={ { position: 'relative' } }>\n                                <FormGroup>\n                                    <InputGroup>\n                                        <FormControl type=\"text\" placeholder='youtube id'\n                                                     onChange={ (e) => {\n                                                         this.setState({ youtubeId: e.target.value });\n                                                     } } value={ this.state.youtubeId }/>\n                                        <InputGroup.Button>\n                                            <Button bsStyle=\"primary\" onClick={ this.onLoadButtonClick }>LOAD</Button>\n                                        </InputGroup.Button>\n                                    </InputGroup>\n                                </FormGroup>\n                            </div>\n                            <YouTube\n                                videoId={this.state.youtubeId}\n                                opts={ opts }\n                                onReady={ this.onYoutubeReady }\n                                onStateChange={ this.onYoutubeStateChanged }>\n                            </YouTube>\n                        </Panel.Body>\n                    </Panel>\n                    <Panel>\n                        <Panel.Heading>\n                            <Panel.Body style={{position:'relative', height:'auto', padding:'0px'}}>\n                                <div style={ {position:'relative', height:'100%', marginBottom:'0px',borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                                    <Form inline>\n                                        <FormGroup>\n                                            <ControlLabel style={ { fontWeight: 'normal' } }>Pre seek interval (left)</ControlLabel>\n                                            <InputGroup style={ offsetInputStyle }>\n                                                <FormControl type=\"text\" value={ this.state.preSeekInterval }\n                                                             onChange={\n                                                                 (e) => {\n                                                                     let str = filterToNumberStr(e.target.value);\n                                                                     let value = parseFloat(str);\n                                                                     if (isNaN(value)) {\n                                                                         value = 0;\n                                                                     }\n                                                                     this.setState({preSeekInterval:str});\n                                                                 }\n                                                             }/>\n                                            </InputGroup>\n                                            <ControlLabel style={ { fontWeight: 'normal', marginLeft: '15px' } }>Next seek interval (right)</ControlLabel>\n                                            <InputGroup style={ offsetInputStyle }>\n                                                <FormControl type=\"text\" value={ this.state.nextSeekInterval }\n                                                             onChange={\n                                                                 (e) => {\n                                                                     let str = filterToNumberStr(e.target.value);\n                                                                     let value = parseFloat(str);\n                                                                     if (isNaN(value)) {\n                                                                         str = \"0\";\n                                                                     }\n                                                                     this.setState({nextSeekInterval:str});\n                                                                 }\n                                                             }/>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Form>\n                                    <div style={{height:'1px', borderWidth:'1px', borderStyle:'solid', borderColor:'#C0C0C0', marginTop:'15px', marginBottom:'15px'}}/>\n                                    <Form inline>\n                                        <FormGroup>\n                                            <ControlLabel style={ { fontWeight: 'normal' } }>Progress time</ControlLabel>\n                                            <InputGroup style={{marginLeft:'15px'}}>\n                                                <FormControl type=\"text\" value={ this.state.progressTime }/>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Form>\n                                    <ControlLabel style={ { marginTop: '15px', fontWeight: 'normal' } }>(Press A key to insert subtitle at this progress time)</ControlLabel>\n                                </div>\n                            </Panel.Body>\n                        </Panel.Heading>\n                    </Panel>\n                </PanelGroup>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        subtitleBorderEvent: state.subtitleBorderEvent.payload,\n    };\n};\n\nexport default connect(mapStateToProps)(YoutubePlayerBorder);\n","import React from 'react';\nimport {\n    Checkbox,\n    ControlLabel,\n    Form,\n    Glyphicon,\n    FormGroup,\n    FormControl,\n    InputGroup,\n    Panel,\n    Button,\n} from 'react-bootstrap';\nimport fetch from 'cross-fetch';\nimport { formatToHHmmss_ss, parseHHmmss_ss } from '../../util/util-moment'\n\nclass SubtitleBorderElement extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            english: props.english,\n            kor: props.kor,\n            start: props.start,\n            startStr : props.startStr,//formatToHHmmss_ss(props.start),\n            end: props.end,\n            endStr : props.endStr, //formatToHHmmss_ss(props.end),\n            learn: props.learn,\n        };\n\n        this.onBeginInputBlur = this.props.onBeginInputBlur;\n        this.onEndInputBlur = this.props.onEndInputBlur;\n    }\n\n    static defaultProps = {\n        domHeight: 204\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.updateStateFromProp(newProps);\n    }\n\n    updateStateFromProp = (newProps) => {\n        this.setState(Object.assign({}, {\n            english: newProps.english,\n            kor: newProps.kor,\n            start: newProps.start,\n            startStr : newProps.startStr,\n            end: newProps.end,\n            endStr : newProps.endStr, //formatToHHmmss_ss(props.end),\n            learn: newProps.learn,\n        }));\n    };\n\n    onEnglishTextChanged = (e) => {\n        this.setState(Object.assign({}, { english: e.target.value }));\n    };\n\n    onKorTextChanged = (e) => {\n        this.setState(Object.assign({}, { kor:e.target.value }));\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(' ele - componentDidUpdate');\n        if (prevProps === this.props)\n            this.props.onStateChanged(this.props, this.state);\n    }\n\n    onRemoveButtonClick = (e) => {\n        this.props.onRemoveButtonClicked(this.props.index);\n    };\n\n    onAddButtonClick = (e) => {\n        this.props.onAddButtonClicked(this.props.index);\n    }\n\n    onPlayButtonClick = (e) => {\n        this.props.onPlayButtonClicked({\n            startTime: this.state.start,\n            endTime: this.state.end\n        });\n    };\n\n    onCheckChanged = (e) => {\n        this.setState({ learn: e.target.checked });\n        // console.log(this.state.learn);\n    };\n\n    render() {\n        const timeInputStyle = {\n            width: '100px',\n            marginLeft: '5px',\n            marginRight: '5px',\n            textAlign: 'center',\n        };\n\n        const textAreaStyle = {\n            width: '100%',\n            height: '80px',\n            resize: 'none',\n        };\n\n        return (\n                <Panel.Body style={\n                        {\n                            position: 'relative',\n                            background: '#e9ecef',\n                            padding: '0px',\n                            height: 'auto',//this.props.domHeight + \"px\",\n                            borderWidth: this.props.focus ? '5px' : '0px',\n                            borderColor: 'red',\n                            borderStyle: 'dotted',\n                            boxSizing: 'border-box',\n                        }\n                    }>\n                    <div style={{position:\"relative\", width:\"100%\", borderStyle:\"solid\", borderColor:\"#C0C0C0\", borderWidth:\"1px\"}} />\n                    <div style={{position:\"relative\", marginTop:\"15px\"}}/>\n                    <div style={{float: 'left', position:\"relative\", marginLeft:\"15px\", borderStyle:\"solid\", borderColor:\"red\", borderWidth:\"0px\", height:'auto'}}>\n                        <div style={ { float: 'left', width:'36px', borderStyle:\"solid\", borderColor:\"red\", borderWidth:\"0px\" } }>\n                            { this.props.index != 0 &&\n                                <Button bsSize=\"small\" onClick={ this.onRemoveButtonClick }>\n                                    <Glyphicon glyph=\"minus\"/>\n                                </Button>\n                            }\n                            <Button style={{marginTop:'5px'}} bsSize=\"small\" onClick={ this.onAddButtonClick }>\n                                <Glyphicon glyph=\"plus\"/>\n                            </Button>\n                        </div>\n                        <div style={ { position:\"relative\", float: 'left', height: \"100%\", borderStyle:\"solid\", borderColor:\"red\", borderWidth:\"0px\" } }>\n                            <Form inline>\n                                <FormGroup>\n                                    <InputGroup style={ timeInputStyle }>\n                                        <FormControl type=\"text\"\n                                                     value={\n                                                         this.state.startStr\n                                                     }\n                                                     onChange={\n                                                         (e) => {\n                                                             this.setState(Object.assign({}, { startStr: e.target.value }));\n                                                         }\n                                                     }\n                                                     onBlur= {\n                                                         (e) => {\n                                                             let sec = parseHHmmss_ss(e.target.value);\n                                                             let str = formatToHHmmss_ss(sec);\n                                                             this.setState(Object.assign({}, { start: sec, startStr : str }));\n                                                             this.onBeginInputBlur && this.onBeginInputBlur(this.props.index);\n                                                         }\n                                                     }\n                                                     onKeyPress={(e) => {\n                                                         if (e.charCode === 13) {\n                                                             let str = this.state.startStr;\n                                                             let sec = parseHHmmss_ss(str);\n                                                             this.setState(Object.assign({}, { start: sec, startStr : str }));\n                                                             this.onBeginInputPressed();\n                                                         }\n                                                     }}\n                                        />\n                                    </InputGroup>\n                                    <ControlLabel>~</ControlLabel>\n                                    <InputGroup style={ timeInputStyle }>\n                                        <FormControl type=\"text\" value={ this.state.endStr }\n                                             onChange={\n                                                (e) => {\n                                                    this.setState(Object.assign({}, { endStr: e.target.value }));\n                                                }\n                                             }\n                                             onBlur={\n                                                 (e) => {\n                                                     let sec = parseHHmmss_ss(e.target.value);\n                                                     if (sec < this.state.start) {\n                                                         sec = this.state.start;\n                                                     }\n                                                     let str = formatToHHmmss_ss(sec);\n                                                     this.setState(Object.assign({}, { end: sec, endStr : str }));\n                                                     this.onEndInputBlur && this.onEndInputBlur(this.props.index);\n                                                 }\n                                             }\n                                             onKeyPress={(e) => {\n                                                 if (e.charCode === 13) {\n                                                     let str = this.state.endStr;\n                                                     let sec = parseHHmmss_ss(str);\n                                                     if (sec < this.state.start) {\n                                                         sec = this.state.start;\n                                                     }\n                                                     str = formatToHHmmss_ss(sec);\n                                                     this.setState(Object.assign({}, { end: sec, endStr : str }));\n                                                     this.onEndInputBlur && this.onEndInputBlur(this.props.index);\n                                                     // this.onBeginInputPressed();\n                                                 }\n                                             }}\n                                        />\n                                    </InputGroup>\n                                </FormGroup>\n                            </Form>\n                            <Checkbox style={ { marginLeft: '5px' } } checked={ this.state.learn }\n                                      onChange={ this.onCheckChanged }>Learning</Checkbox>\n                        </div>\n                        <div style={ { float: 'left', width: '266px', marginRight:'15px', marginBottom:'15px', boxSizing: 'border-box', borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                            <FormGroup>\n                                <FormControl style={ textAreaStyle } componentClass=\"textarea\" placeholder=\"\"\n                                             value={ this.state.english } onChange={ this.onEnglishTextChanged }/>\n                                <div style={ { marginTop: '5px' } }></div>\n                                <FormControl style={ textAreaStyle } componentClass=\"textarea\" placeholder=\"\"\n                                             value={this.state.kor} onChange={this.onKorTextChanged}/>\n                            </FormGroup>\n                            <div style={ {position:'relative', float: 'right', clear: 'left', borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                                {/*<Button bsSize=\"small\" onClick={ this.onTranslateButtonClick }>TRANSLATE</Button>*/}\n                                <Button bsSize=\"small\" style={{marginLeft:'5px'}} onClick={ this.onPlayButtonClick }>PLAY</Button>\n                            </div>\n                        </div>\n                    </div>\n            </Panel.Body>\n        );\n    }\n}\n\nexport default SubtitleBorderElement;\n","import { confirmAlert } from 'react-confirm-alert'; // Import\nimport React from 'react';\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport {Alert, Button} from 'react-bootstrap';\n\nexport const simpleAlert = (msg) => {\n    confirmAlert({\n        customUI: ({ onClose }) => {\n            const centerBoxStyle = {\n                display: \"table\", marginLeft: \"auto\", marginRight: \"auto\"\n            }\n\n            return (\n                <div className='custom-ui'>\n                    <Alert bsStyle=\"info\">\n                        <div style={centerBoxStyle}>\n                            <h4>알림</h4>\n                        </div>\n                        <div style={{padding:'5px'}}/>\n                        <p>{msg}</p>\n                        <div style={{padding:'10px'}}/>\n                        <div style={centerBoxStyle}>\n                            <Button bsStyle=\"info\" onClick={onClose}>확인</Button>\n                        </div>\n                    </Alert>\n                </div>\n            )\n        }\n    })\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport fetch from 'cross-fetch';\nimport SubtitleBorderElement from './SubtitleBorderElement';\nimport { PanelGroup, Button, ControlLabel, FormGroup, InputGroup, FormControl, Form, Panel } from 'react-bootstrap';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport moment from 'moment';\nimport {isUpdatedMoment} from '../../util/util-moment'\nimport {simpleAlert} from '../../util/util-dialog'\nimport Loader from 'react-loader-spinner'\nimport { formatToHHmmss_ss, parseHHmmss_ss } from '../../util/util-moment'\n\nvar _ = require('underscore');\nvar xml2js = require('xml2js');\nvar convert = require('xml-js');\n\nclass SubtitleBorder extends Component {\n\n    currentEvent = {\n        youtubePlayerBorderEvent: {\n            youtubeIdUpdateEvent: {\n                moment: null,\n                youtubeId: null,\n            },\n            addSubtitleBeginTimeEvent: {\n                moment: null,\n                time: null,\n            },\n        },\n    };\n\n    sendingEvent = {\n        playPhaseEvent: {\n            moment: null,\n            startTime: null,\n            endTime: null\n        }\n    }\n\n    dom = null;\n    element = null;\n    fileReader = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            transcript: [],\n            nearNext: '',\n            loading: false,\n        };\n        this.update = this.update.bind(this);\n        this.fetchTranscriptXml = this.fetchTranscriptXml.bind(this);\n        this.dom = document.createElement('div');\n        this.element = document.createElement(\"a\");\n        this.fileReader = new FileReader();\n        this.fileReader.onload = () => {\n            this.onFileContentLoaded(this.fileReader.result);\n        };\n    }\n\n    onFileContentLoaded = (content) => {\n        try {\n            let rawJson = JSON.parse(convert.xml2json(content, { compact: true, spaces: 4 }));\n            console.log(rawJson);\n            let transcript = [];\n            if (rawJson.transcript && rawJson.transcript.text && rawJson.transcript.text.length > 0) {\n                rawJson.transcript.text.map(e => {\n                    let attributes = e._attributes;\n                    e.dur = parseFloat(attributes.dur);\n                    e.start = parseFloat(attributes.start);\n                    e.end = e.start + e.dur;\n                    e.startStr = formatToHHmmss_ss(e.start);\n                    e.endStr = formatToHHmmss_ss(e.end);\n                    e.learn = attributes.learning === 'true' ? true : false;\n                    e.english = e._text;\n                    e.kor = attributes.kor === undefined ? \"\" : attributes.kor;\n                    delete e._attributes;\n                    delete e._text;\n                    return e;\n                });\n                transcript = rawJson.transcript.text;\n            }\n            console.log(transcript);\n            this.setState({ transcript: transcript });\n            this.refs.fileUploader.value = \"\";\n        } catch (e) {\n            simpleAlert('파일에 문제가 있습니다.');\n        }\n    };\n\n    componentWillReceiveProps(newProps) {\n        this.update(newProps);\n    }\n\n    showLoading(value) {\n        this.setState({loading : value})\n    }\n\n    update = async (newProps) => {\n        console.log(newProps);\n\n        let newYoutubeIdUpdateEvent = newProps.youtubePlayerBorderEvent.youtubeIdUpdateEvent;\n        let currentYoutubeIdUpdateEvent = this.currentEvent.youtubePlayerBorderEvent.youtubeIdUpdateEvent;\n\n        if (isUpdatedMoment(currentYoutubeIdUpdateEvent.moment, newYoutubeIdUpdateEvent.moment)) {\n            this.showLoading(true);\n            this.currentEvent.youtubePlayerBorderEvent.youtubeIdUpdateEvent = _.clone(newYoutubeIdUpdateEvent);\n            console.log(newYoutubeIdUpdateEvent.youtubeId);\n            if (newYoutubeIdUpdateEvent.youtubeId !== null) {\n                try {\n                    let transcript = await this.fetchTranscriptXml(newYoutubeIdUpdateEvent.youtubeId);\n                    if (transcript.length == 0) {\n                        transcript[0] = {\n                            start: 0,\n                            dur: 0,\n                            end: 0,\n                            startStr: formatToHHmmss_ss(0),\n                            endStr: formatToHHmmss_ss(0),\n                            english: \"\",\n                            learn: false,\n                            focus: false,\n                            kor: \"\"\n                        };\n                    }\n                    this.setState({ transcript: transcript });\n                    console.log(transcript);\n                    this.showLoading(false);\n                } catch (e) {\n                    simpleAlert('youtubeId가 유효하지 않습니다.');\n                    this.showLoading(false);\n                }\n            }\n            return;\n        }\n\n        // ---\n\n        let newAddSubtitleBeginTimeEvent = newProps.youtubePlayerBorderEvent.addSubtitleBeginTimeEvent;\n        let currentAddSubtitleBeginTimeEvent = this.currentEvent.youtubePlayerBorderEvent.addSubtitleBeginTimeEvent;\n        if (isUpdatedMoment(currentAddSubtitleBeginTimeEvent.moment, newAddSubtitleBeginTimeEvent.moment)) {\n            this.currentEvent.youtubePlayerBorderEvent.addSubtitleBeginTimeEvent = _.clone(newAddSubtitleBeginTimeEvent);\n            if (newAddSubtitleBeginTimeEvent.time !== null) {\n                this.insertSubtitleElement(newAddSubtitleBeginTimeEvent.time, newAddSubtitleBeginTimeEvent.time + 1);\n            }\n            return;\n        }\n    };\n\n    onExportButtonClicked = (e) => {\n        let title = this.currentEvent.youtubePlayerBorderEvent.youtubeIdUpdateEvent.youtubeId;\n        let content = this.refineTranscriptToXmlJson();\n        let file = new Blob([content], {type: 'text/plain'});\n        this.element.href = URL.createObjectURL(file);\n        this.element.download = `${title}.xml`; // \"myFile.xml\";\n        this.element.click();\n    };\n\n    onImportButtonClicked = (e) => {\n        this.refs.fileUploader.click();\n    };\n\n    onChangeFile = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        let file = e.target.files[0];\n        if (file)\n            this.fileReader.readAsText(file);\n    };\n\n    refineTranscriptToXmlJson = () => {\n        let targetJson = {\n            \"declaration\": {\n                \"attributes\": {\n                    \"version\": \"1.0\",\n                    \"encoding\": \"utf-8\"\n                }\n            },\n            \"elements\": [\n                {\n                    \"type\": \"element\",\n                    \"name\": \"transcript\",\n                    \"elements\": [],\n                }\n            ]\n        }\n        let src = [...this.state.transcript];\n        let elements = targetJson.elements[0].elements;\n        src.forEach(e => {\n            console.log(e.kor);\n            let ele = {\n                \"type\": \"element\",\n                \"name\": \"text\",\n                \"attributes\": {\n                    \"start\": e.start.toString(),\n                    \"dur\": (e.end - e.start).toString(),\n                    \"learning\": e.learn.toString(),\n                    \"kor\": e.kor,\n                },\n                \"elements\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": e.english,\n                    }\n                ]\n            }\n            elements.push(ele);\n        });\n\n        return convert.json2xml(targetJson, {compact: false, ignoreComment: true, spaces: 4});\n    }\n\n    createAction = () => {\n        return { type: 'SubtitleBorder', payload: Object.assign({}, _.clone(this.sendingEvent)) };\n    };\n\n    htmlDecode = (input) => {\n        this.dom.innerHTML = input;\n        return this.dom.childNodes.length === 0 ? '' : this.dom.childNodes[0].nodeValue;\n    };\n\n    fetchTranscriptXml = async (youtubeId) => {\n        let data = await fetch(`https://www.youtube.com/api/timedtext?v=${ youtubeId }&lang=en`, { method: 'GET' }).then(response => {\n            return response.text();\n        }).then(text => {\n            return text;\n        });\n\n        if (data === \"\") {\n            return [];\n        }\n\n        const transcript = await new Promise((resolve, reject) => xml2js.parseString(data, (err, result) => {\n            if (err)\n                reject(err);\n            else\n                resolve(result.transcript.text);\n        }));\n\n        transcript.map(ele => {\n            ele.start = parseFloat(ele.$.start);\n            ele.dur = parseFloat(ele.$.dur);\n            ele.end = ele.start + ele.dur;\n            ele.startStr = formatToHHmmss_ss(ele.start);\n            ele.endStr = formatToHHmmss_ss(ele.end);\n            ele.english = this.htmlDecode(ele._);\n            ele.learn = false;\n            ele.focus = false;\n            ele.kor = \"\";\n            delete ele.$;\n            delete ele._;\n            return ele;\n        });\n\n        return transcript;\n    };\n\n    removeSubtitleElement = (i) => {\n        console.log('removeSubtitleElement ' + i);\n        console.log(this.state.transcript);\n        this.setState({\n            transcript: [...this.state.transcript].filter((ele, idx) => {\n                return idx !== i;\n            }),\n        });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log(this.state.transcript);\n    }\n\n    addSubtitleElement = (i) => {\n        console.log('addSubtitleElement');\n        let front = this.state.transcript[i];\n\n        let rear = i < this.state.transcript.length-1 ? this.state.transcript[i+1] : null;\n        let dur = rear === null? 0 : rear.start - front.end;\n\n        let transcriptEle = {\n            dur: dur,\n            start: front.end,\n            end: front.end + dur,\n            startStr: formatToHHmmss_ss(front.start),\n            endStr: formatToHHmmss_ss(front.end),\n            english: \"\",\n            learn: false,\n        };\n        let copied = [...this.state.transcript];\n        copied.splice(i+1, 0, transcriptEle);\n        copied.join();\n        this.setState({ transcript : copied });\n    };\n\n    insertSubtitleElement = (start, end) => {\n        let transcriptEle = {\n            start: start,\n            end: end,\n            dur: end - start,\n            startStr: formatToHHmmss_ss(start),\n            endStr: formatToHHmmss_ss(end),\n            english: \"\",\n            kor: \"\",\n            learn: false,\n        };\n        console.log('insertSubtitleElement');\n        let copied = [...this.state.transcript];\n        copied.push(transcriptEle);\n        copied = this.getSortTranscripts(copied);\n        this.setState({ transcript: copied });\n    }\n\n    playPhase = (phaseInfo) => {\n        this.sendingEvent.playPhaseEvent.moment = moment();\n        this.sendingEvent.playPhaseEvent.startTime = phaseInfo.startTime;\n        this.sendingEvent.playPhaseEvent.endTime = phaseInfo.endTime;\n        this.props.dispatch(this.createAction());\n    };\n\n    onStateChanged = (props, state) => {\n        let target = [...this.state.transcript].map((e, i) => {\n            if (i === props.index) {\n                console.log(state);\n                e.english = state.english;\n                e.kor = state.kor;\n                e.start = state.start;\n                e.startStr = state.startStr;\n                e.end = state.end;\n                e.endStr = state.endStr;\n                e.learn = state.learn;\n            }\n            return e;\n        });\n        target = this.getSortTranscripts(target);\n        this.setState({ transcript: target });\n    };\n\n    getSortTranscripts = (transcripts) => {\n        if (transcripts.length < 2)\n            return transcripts;\n        transcripts.sort((a, b) => a.start - b.start);\n        return transcripts;\n    };\n\n    onBeginInputBlur = (index) => {\n    };\n\n    onEndInputBlur = (index) => {\n    };\n\n    render() {\n        return (\n            <div style={ { position: 'absolute', marginLeft: '630px', minWidth: '565px', width:'auto'} }>\n                <PanelGroup>\n                    <Panel bsStyle=\"primary\" style={ { height: '100%' } }>\n                        <Panel.Heading style={ { fontSize: '16px' } }>\n                            SUBTITLE\n                        </Panel.Heading>\n                        {\n                            !this.state.loading &&\n                            <Panel.Body style={ {\n                                position: 'relative',\n                                boxSizing: 'border-box',\n                                height: '676px', // 655\n                                padding: '0px',\n                            } }>\n                                <div style={ {\n                                    overflow: 'scroll',\n                                    height: '100%',\n                                    borderWidth: '1px',\n                                    borderColor: 'black',\n                                    borderStyle: '',\n                                } }>\n                                    {\n                                        this.state.transcript.map((ele, i) => {\n                                            return <SubtitleBorderElement\n                                                key={ i }\n\n                                                english={ ele.english }\n                                                index={ i }\n                                                start={ ele.start }\n                                                startStr={ele.startStr}\n                                                end={ ele.end }\n                                                endStr={ele.endStr}\n                                                learn={ ele.learn }\n                                                focus={ ele.focus }\n                                                kor={ ele.kor }\n\n                                                onStateChanged={ this.onStateChanged }\n                                                onAddButtonClicked={ this.addSubtitleElement }\n                                                onRemoveButtonClicked={ this.removeSubtitleElement }\n                                                onPlayButtonClicked={ this.playPhase }\n                                                onBeginInputBlur={this.onBeginInputBlur}\n                                                onEndInputBlur={ this.onEndInputBlur }\n                                            />;\n                                        })\n                                    }\n                                </div>\n                            </Panel.Body>\n                        }\n                        { this.state.loading &&\n                            <Panel.Body\n                                style={ {\n                                    position: 'relative',\n                                    boxSizing: 'border-box',\n                                    height: '676px', // 655\n                                    padding: '0px',\n                                } }\n                            >\n                                <div\n                                    style={ {\n                                        position: 'absolute',\n                                        top: '50%',\n                                        left: '50%',\n                                        transform: 'translate(-50%, -50%)'\n                                    } }>\n                                    <Loader\n                                        type=\"Puff\"\n                                        color=\"#00BFFF\"\n                                        height=\"100\"\n                                        width=\"100\"\n                                    />\n                                </div>\n                            </Panel.Body>\n                        }\n                    </Panel>\n                    <Panel>\n                        <Panel.Heading>\n                            <Panel.Body style={{position:'relative', height:'auto', padding:'0px'}}>\n                                <input onChange={this.onChangeFile} type=\"file\" id=\"file\" ref=\"fileUploader\" style={{display: \"none\"}}/>\n                                <div style={ {position:'relative', height:'100%', marginBottom:'0px',borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                                    <Button style={{position:'relative', float:'right'}} bsSize=\"small\" onClick={this.onExportButtonClicked}>EXPORT</Button>\n                                    <Button style={{position:'relative', float:'right', marginRight:'5px'}} bsSize=\"small\" onClick={this.onImportButtonClicked}>IMPORT</Button>\n                                    {/*<Button style={{position:'relative', float:'right', marginRight:'5px'}} bsSize=\"small\" onClick={this.onReorderButtonClicked}>REORDER</Button>*/}\n                                </div>\n                            </Panel.Body>\n                        </Panel.Heading>\n                    </Panel>\n                </PanelGroup>\n                {/*<Spinner animation=\"border\" variant=\"primary\" />*/}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        youtubePlayerBorderEvent: state.youtubePlayerBorderEvent.payload,\n    };\n};\n\nexport default connect(mapStateToProps)(SubtitleBorder);\n","import React, { Component } from 'react'\nimport YoutubePlayerBorder from './components/youtubePlayer/YoutubePlayerBorder'\nimport SubtitleBorder from './components/subtitle/SubtitleBorder'\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <div style={ {position:\"absolute\", width:\"610px\"} }>\n                    <YoutubePlayerBorder />\n                </div>\n                <SubtitleBorder />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport thunkMiddleware from 'redux-thunk'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers/reducers'\n\nimport App from './App.js'\nlet rootElement = document.getElementById('root')\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n)\n"],"sourceRoot":""}