{"version":3,"sources":["reducers/reducers.js","const/YoutubePlayerState.js","util/util-string.js","util/util-moment.js","components/youtubePlayer/progressPublisher.js","components/youtubePlayer/YoutubePlayerBorder.js","components/subtitle/SubtitleBorderElement.js","util/util-dialog.js","components/subtitle/SubtitleBorder.js","App.js","index.js"],"names":["combineReducers","youtubePlayerBorderEvent","state","arguments","length","undefined","payload","youtubeIdUpdateEvent","moment","youtubeId","action","type","subtitleBorderEvent","playPhaseEvent","startTime","endTime","NOT_STARTED","PLAYING","PAUSED","CUED","filterToNumberStr","str","split","match","join","formatToHHmmss_ss","sec","longValue","duration","hours","minutes","seconds","millisecondsStr","Math","floor","milliseconds","toString","len","i","parseHHmmss_ss","substring","valueOf","isUpdatedMoment","currentMoment","newMoment","console","log","ProgressPublisher","progressTimeId","youtubePlayer","onProgressCallback","eventQueue","onReady","e","_this","target","onStateChanged","that","data","setInterval","currentTime","getCurrentTime","found","find","targetTime","callback","splice","indexOf","clearTimeout","setOnProgress","setAlarm","push","_","require","YoutubePlayerBorder","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendingEvent","currentEvent","progressPublisher","update","newProps","curPlayPhaseEvent","newPlayPhaseEvent","clone","playPhase","seekTo","playVideo","pauseVideo","onYoutubeReady","onYoutubeStateChanged","createAction","assign","onLoadButtonClick","dispatch","cueVideoById","onKeyPressed","key","playerState","getPlayerState","seek","parseFloat","preSeekInterval","nextSeekInterval","onProgress","curTime","setState","progressTime","_this2","offsetInputStyle","width","marginLeft","marginRight","textAlign","react_default","a","createElement","style","position","height","boxSizing","PanelGroup","Panel","bsStyle","Body","react_keyboard_event_handler_default","handleKeys","onKeyEvent","FormGroup","InputGroup","FormControl","placeholder","onChange","value","Button","onClick","YouTube","videoId","opts","playerVars","autoplay","onStateChange","Heading","padding","marginBottom","borderWidth","borderColor","borderStyle","Form","inline","ControlLabel","fontWeight","isNaN","marginTop","Component","connect","SubtitleBorderElement","updateStateFromProp","english","kor","start","end","learn","onEnglishTextChanged","onKorTextChanged","onRemoveButtonClick","onRemoveButtonClicked","index","onAddButtonClick","onAddButtonClicked","onPlayButtonClick","onPlayButtonClicked","onCheckChanged","checked","prevProps","prevState","timeInputStyle","textAreaStyle","resize","background","focus","float","bsSize","Glyphicon","glyph","Checkbox","componentClass","clear","React","defaultProps","domHeight","simpleAlert","msg","confirmAlert","customUI","_ref","onClose","centerBoxStyle","display","className","Alert","xml2js","convert","SubtitleBorder","dom","element","fileReader","onFileContentLoaded","content","rawJson","JSON","parse","xml2json","compact","spaces","transcript","text","map","attributes","_attributes","dur","learning","_text","refs","fileUploader","asyncToGenerator","regenerator_default","mark","_callee","newYoutubeIdUpdateEvent","currentYoutubeIdUpdateEvent","wrap","_context","prev","next","fetchTranscriptXml","sent","t0","stop","_x","apply","onExportButtonClicked","title","refineTranscriptToXmlJson","file","Blob","href","URL","createObjectURL","download","concat","click","onImportButtonClicked","onChangeFile","stopPropagation","preventDefault","files","readAsText","onReorderButtonClicked","sortTranscripts","targetJson","declaration","version","encoding","elements","name","src","toConsumableArray","forEach","ele","json2xml","ignoreComment","htmlDecode","input","innerHTML","childNodes","nodeValue","_ref2","_callee2","_context2","fetch","method","then","response","Promise","resolve","reject","parseString","err","result","$","abrupt","_x2","removeSubtitleElement","filter","idx","addSubtitleElement","front","rear","transcriptEle","copied","phaseInfo","sort","b","nearNext","bind","assertThisInitialized","document","FileReader","onload","fontSize","overflow","subtitle_SubtitleBorderElement","id","ref","App","youtubePlayer_YoutubePlayerBorder","subtitle_SubtitleBorder","rootElement","getElementById","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","react_redux_es","src_App"],"mappings":"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","file":"static/js/main.d49fff06.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport moment from 'moment';\n\nconst createYoutubePayload = () => {\n    return {\n        payload: {\n            youtubeIdUpdateEvent: {\n                moment: moment(),\n                youtubeId: null,\n            },\n        },\n    };\n};\n\nconst youtubePlayerBorderEvent = (state = createYoutubePayload(), action) => {\n    switch (action.type) {\n        case 'YoutubePlayerBorder':\n            return { payload: action.payload };\n    }\n    return state;\n};\n\nconst createSubtitleBorderPayload = () => {\n    return {\n        payload: {\n            playPhaseEvent: {\n                moment: null,\n                startTime: null,\n                endTime: null\n            }\n        },\n    }\n};\n\nconst subtitleBorderEvent = (state = createSubtitleBorderPayload(), action) => {\n    switch (action.type) {\n        case 'SubtitleBorder':\n            return { payload: action.payload };\n    }\n    return state;\n};\n\nexport default combineReducers({\n    youtubePlayerBorderEvent,\n    subtitleBorderEvent,\n});\n","/*\n -1(시작되지 않음)\n 0(종료됨)\n 1(재생 중)\n 2(일시중지됨)\n 3(버퍼링 중)\n 5(동영상 신호)\n* */\nconst NOT_STARTED = -1;\nconst ENDED = 0;\nconst PLAYING = 1;\nconst PAUSED = 2;\nconst BUFFERING = 3;\nconst CUED = 5;\nexport { NOT_STARTED, ENDED, PLAYING, PAUSED, BUFFERING, CUED };\n\n","export const filterToNumberStr = (str) => {\n    let re = /[0-9.]+/g;\n    str = (str.match(re) || []).join('');\n    let split = str.split('.');\n    if (split.length > 1) {\n        str = split[0] + \".\" + split[1];\n    }\n    return str;\n}\n","import moment from 'moment';\n\nexport const formatToHHmmss_ss = (sec) => {\n    let longValue = sec * 1000;\n    let duration = moment.duration(longValue);\n    let str = '';\n    str += duration.hours() >= 10 ? duration.hours() + ':' : '0' + duration.hours() + ':';\n    str += duration.minutes() >= 10 ? duration.minutes() + ':' : '0' + duration.minutes() + ':';\n    str += duration.seconds() >= 10 ? duration.seconds() + '.' : '0' + duration.seconds() + '.';\n    let millisecondsStr = Math.floor(duration.milliseconds()).toString();\n    const len = millisecondsStr.length;\n    for (var i = 0; i < 3-len; i++) {\n        millisecondsStr = \"0\" + millisecondsStr;\n    }\n    str += millisecondsStr;\n    // console.log('formatToHHmmss_ss');\n    return str;\n};\n\nexport const parseHHmmss_ss = (str) => {\n    let split = str.split(\".\");\n    if (split.length === 2 && split[1].length > 3) {\n        str = split[0] + \".\" + split[1].substring(0, 3);\n    }\n    let longValue = moment.duration(str).valueOf();\n    return longValue / 1000;\n};\n\nexport const isUpdatedMoment = (currentMoment, newMoment) => {\n    console.log(currentMoment);\n    console.log(newMoment);\n    if (newMoment === null)\n        return false;\n    if (currentMoment === null || currentMoment < newMoment)\n        return true;\n    return false;\n};\n","import { NOT_STARTED, CUED, PAUSED, PLAYING } from '../../const/YoutubePlayerState';\n\nexport default class ProgressPublisher {\n\n    progressTimeId = null;\n    youtubePlayer = null;\n    onProgressCallback = null;\n\n    eventQueue = [];\n\n    onReady = (e) => {\n        this.youtubePlayer = e.target;\n    };\n\n    onStateChanged = (e) => {\n        let that = this;\n\n        if (e.data === PLAYING) {\n            this.progressTimeId = setInterval(function() {\n                if (that.youtubePlayer) {\n                    let currentTime = that.youtubePlayer.getCurrentTime();\n                    if (that.onProgressCallback)\n                        that.onProgressCallback(currentTime);\n                    if (that.eventQueue.length > 0) {\n                        let found = that.eventQueue.find(e => {\n                            return currentTime >= e.targetTime;\n                        });\n                        if (found !== undefined) {\n                            found.callback();\n                            that.eventQueue.splice(that.eventQueue.indexOf(found), 1);\n                        }\n                    }\n                }\n            }, 10);\n        } else {\n            clearTimeout(this.progressTimeId);\n        }\n    };\n\n    setOnProgress = (callback) => {\n        this.onProgressCallback = callback;\n    };\n\n    setAlarm = (targetTime, callback) => {\n        this.eventQueue.push({\n            targetTime: targetTime,\n            callback: callback\n        });\n    }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport YouTube from 'react-youtube';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { NOT_STARTED, CUED, PAUSED, PLAYING } from '../../const/YoutubePlayerState';\nimport { FormGroup, FormControl, InputGroup, Panel, Button, PanelGroup, ControlLabel, Form } from 'react-bootstrap';\nimport moment from 'moment';\nimport { filterToNumberStr } from '../../util/util-string';\nimport { isUpdatedMoment } from '../../util/util-moment'\nimport ProgressPublisher from './progressPublisher'\nvar _ = require('underscore');\n\nclass YoutubePlayerBorder extends Component {\n\n    youtubePlayer = null;\n    // progressTimeId = null;\n    sendingEvent = {\n        youtubeIdUpdateEvent: {\n            moment: null,\n            youtubeId: null,\n        },\n    };\n\n    currentEvent  = {\n        subtitleBorderEvent: {\n            playPhaseEvent: {\n                moment: null,\n                startTime: null,\n                endTime: null\n            }\n        }\n    };\n\n    progressPublisher = new ProgressPublisher();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            youtubeId: 'kze1JkPl5_8',\n            preSeekInterval: \"1\",\n            nextSeekInterval: \"1\",\n            progressTime: 0,\n        };\n\n        this.progressPublisher.setOnProgress(this.onProgress);\n    }\n\n    componentWillMount() {\n        this.sendingEvent.youtubeIdUpdateEvent.youtubeId = this.state.youtubeId;\n        this.sendingEvent.youtubeIdUpdateEvent.moment = new moment();\n        this.props.dispatch(this.createAction());\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.update(newProps);\n    }\n\n    update = (newProps) => {\n        let curPlayPhaseEvent = this.currentEvent.subtitleBorderEvent.playPhaseEvent;\n        let newPlayPhaseEvent = newProps.subtitleBorderEvent.playPhaseEvent;\n        if (isUpdatedMoment(curPlayPhaseEvent.moment, newPlayPhaseEvent.moment)) {\n            this.currentEvent.subtitleBorderEvent.playPhaseEvent = _.clone(newPlayPhaseEvent);\n            this.playPhase(newPlayPhaseEvent.startTime, newPlayPhaseEvent.endTime);\n        }\n    };\n\n    playPhase = (startTime, endTime) => {\n        this.youtubePlayer.seekTo(startTime);\n        this.youtubePlayer.playVideo();\n        this.progressPublisher.setAlarm(endTime, ()=>{\n            this.youtubePlayer.pauseVideo();\n        });\n    }\n\n    onYoutubeReady = (e) => {\n        this.youtubePlayer = e.target;\n        this.progressPublisher.onReady(e);\n    };\n\n    onYoutubeStateChanged = (e) => {\n        this.progressPublisher.onStateChanged(e);\n    }\n\n    createAction = () => {\n        return { type: 'YoutubePlayerBorder', payload: Object.assign({}, _.clone(this.sendingEvent)) }\n    };\n\n    onLoadButtonClick = (e) => {\n        this.sendingEvent.youtubeIdUpdateEvent.moment = new moment();\n        this.sendingEvent.youtubeIdUpdateEvent.youtubeId = this.state.youtubeId;\n        this.props.dispatch(this.createAction());\n        this.youtubePlayer.cueVideoById(this.state.youtubeId);\n    };\n\n    onKeyPressed = (key) => {\n        if (this.youtubePlayer === null)\n            return;\n\n        let playerState = this.youtubePlayer.getPlayerState();\n\n        switch (key) {\n            case 'space':\n                console.log(playerState);\n                if (playerState === CUED) {\n                    this.youtubePlayer.playVideo();\n                } else if (playerState === NOT_STARTED || playerState === PAUSED) {\n                    this.youtubePlayer.playVideo();\n                } else if (playerState === PLAYING) {\n                    this.youtubePlayer.pauseVideo();\n                }\n                break;\n            case 'left':\n                if (playerState === PLAYING || playerState === PAUSED) {\n                    let seek = this.youtubePlayer.getCurrentTime() - parseFloat(this.state.preSeekInterval);\n                    this.youtubePlayer.pauseVideo();\n                    this.youtubePlayer.seekTo(seek);\n                }\n                break;\n            case 'right':\n                if (playerState === PLAYING || playerState === PAUSED) {\n                    let seek = this.youtubePlayer.getCurrentTime() + parseFloat(this.state.nextSeekInterval);\n                    this.youtubePlayer.pauseVideo();\n                    this.youtubePlayer.seekTo(seek);\n                }\n                break;\n        }\n    };\n\n    onProgress = (curTime) => {\n        this.setState({progressTime: curTime});\n    }\n\n    render() {\n        const opts = {\n            width: '100%',\n            playerVars: { // https://developers.google.com/youtube/player_parameters\n                autoplay: 0,\n            },\n        };\n\n        const offsetInputStyle = {\n            width: '50px',\n            marginLeft: '15px',\n            marginRight: '5px',\n            textAlign: 'center',\n        };\n\n        return (\n            <div style={ { position: 'relative', width: '100%', height: 'auto', boxSizing: 'border-box' } }>\n                <PanelGroup>\n                    <Panel bsStyle=\"primary\">\n                        <Panel.Body>\n                            <KeyboardEventHandler\n                                handleKeys={ ['space', 'left', 'right', 's', 'S', 'e', 'E'] }\n                                onKeyEvent={ (key, e) => this.onKeyPressed(key) }/>\n                            <div style={ { position: 'relative' } }>\n                                <FormGroup>\n                                    <InputGroup>\n                                        <FormControl type=\"text\" placeholder='youtube id'\n                                                     onChange={ (e) => {\n                                                         this.setState({ youtubeId: e.target.value });\n                                                     } } value={ this.state.youtubeId }/>\n                                        <InputGroup.Button>\n                                            <Button bsStyle=\"primary\" onClick={ this.onLoadButtonClick }>LOAD</Button>\n                                        </InputGroup.Button>\n                                    </InputGroup>\n                                </FormGroup>\n                            </div>\n                            <YouTube\n                                videoId={this.state.youtubeId}\n                                opts={ opts }\n                                onReady={ this.onYoutubeReady }\n                                onStateChange={ this.onYoutubeStateChanged }>\n                            </YouTube>\n                        </Panel.Body>\n                    </Panel>\n                    <Panel>\n                        <Panel.Heading>\n                            <Panel.Body style={{position:'relative', height:'auto', padding:'0px'}}>\n                                <div style={ {position:'relative', height:'100%', marginBottom:'0px',borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                                    <Form inline>\n                                        <FormGroup>\n                                            <ControlLabel style={ { fontWeight: 'normal' } }>Pre seek interval (left)</ControlLabel>\n                                            <InputGroup style={ offsetInputStyle }>\n                                                <FormControl type=\"text\" value={ this.state.preSeekInterval }\n                                                             onChange={\n                                                                 (e) => {\n                                                                     let str = filterToNumberStr(e.target.value);\n                                                                     let value = parseFloat(str);\n                                                                     if (isNaN(value)) {\n                                                                         value = 0;\n                                                                     }\n                                                                     this.setState({preSeekInterval:str});\n                                                                 }\n                                                             }/>\n                                            </InputGroup>\n                                            <ControlLabel style={ { fontWeight: 'normal', marginLeft: '15px' } }>Next seek interval (right)</ControlLabel>\n                                            <InputGroup style={ offsetInputStyle }>\n                                                <FormControl type=\"text\" value={ this.state.nextSeekInterval }\n                                                             onChange={\n                                                                 (e) => {\n                                                                     let str = filterToNumberStr(e.target.value);\n                                                                     let value = parseFloat(str);\n                                                                     if (isNaN(value)) {\n                                                                         str = \"0\";\n                                                                     }\n                                                                     this.setState({nextSeekInterval:str});\n                                                                 }\n                                                             }/>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Form>\n                                    <div style={{height:'1px', borderWidth:'1px', borderStyle:'solid', borderColor:'#C0C0C0', marginTop:'15px', marginBottom:'15px'}}/>\n                                    <Form inline>\n                                        <FormGroup>\n                                            <ControlLabel style={ { fontWeight: 'normal' } }>Progress time</ControlLabel>\n                                            <InputGroup style={{marginLeft:'15px'}}>\n                                                <FormControl type=\"text\" value={ this.state.progressTime }/>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Form>\n                                </div>\n                            </Panel.Body>\n                        </Panel.Heading>\n                    </Panel>\n                </PanelGroup>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        subtitleBorderEvent: state.subtitleBorderEvent.payload,\n    };\n};\n\nexport default connect(mapStateToProps)(YoutubePlayerBorder);\n","import React from 'react';\nimport {\n    Checkbox,\n    ControlLabel,\n    Form,\n    Glyphicon,\n    FormGroup,\n    FormControl,\n    InputGroup,\n    Panel,\n    Button,\n} from 'react-bootstrap';\nimport fetch from 'cross-fetch';\nimport { formatToHHmmss_ss, parseHHmmss_ss } from '../../util/util-moment'\n\nclass SubtitleBorderElement extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            english: props.english,\n            kor: props.kor,\n            start: props.start,\n            end: props.end,\n            learn: props.learn,\n        };\n    }\n\n    static defaultProps = {\n        domHeight: 204\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.updateStateFromProp(newProps);\n    }\n\n    updateStateFromProp = (newProps) => {\n        this.setState(Object.assign({}, {\n            english: newProps.english,\n            kor: newProps.kor,\n            start: newProps.start,\n            end: newProps.end,\n            learn: newProps.learn,\n        }));\n    };\n\n    onEnglishTextChanged = (e) => {\n        this.setState(Object.assign({}, { english: e.target.value }));\n    };\n\n    onKorTextChanged = (e) => {\n        this.setState(Object.assign({}, { kor:e.target.value }));\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps === this.props)\n            this.props.onStateChanged(this.props, this.state);\n    }\n\n    onRemoveButtonClick = (e) => {\n        this.props.onRemoveButtonClicked(this.props.index);\n    };\n\n    onAddButtonClick = (e) => {\n        this.props.onAddButtonClicked(this.props.index);\n    }\n\n    onPlayButtonClick = (e) => {\n        this.props.onPlayButtonClicked({\n            startTime: this.state.start,\n            endTime: this.state.end\n        });\n    };\n\n    // onTranslateButtonClick = (e) => {\n    //     //http://127.0.0.1:3001/translate\n    //     fetch(\"http://192.168.0.10:3001/translate?text=hi&target=ko\",\n    //     {\n    //         method:'GET',\n    //     }).then(response => {\n    //         console.log(response);\n    //         // console.log(response.text());\n    //         // return response.json();\n    //         // return response.json();\n    //         return response.json();\n    //     }).then(data => {\n    //         console.log(data);\n    //     });\n    //     /*\n    //      let data = await fetch(`https://www.youtube.com/api/timedtext?v=${ youtubeId }&lang=en`, { method: 'GET' }).then(response => {\n    //      return response.text();\n    //      }).then(text => {\n    //      return text;\n    //      });\n    //     * */\n    // };\n\n    onCheckChanged = (e) => {\n        this.setState({ learn: e.target.checked });\n        // console.log(this.state.learn);\n    };\n\n    render() {\n        const timeInputStyle = {\n            width: '100px',\n            marginLeft: '5px',\n            marginRight: '5px',\n            textAlign: 'center',\n        };\n\n        const textAreaStyle = {\n            width: '100%',\n            height: '80px',\n            resize: 'none',\n        };\n\n        return (\n                <Panel.Body style={\n                        {\n                            position: 'relative',\n                            background: '#e9ecef',\n                            padding: '0px',\n                            height: 'auto',//this.props.domHeight + \"px\",\n                            borderWidth: this.props.focus ? '5px' : '0px',\n                            borderColor: 'red',\n                            borderStyle: 'dotted',\n                            boxSizing: 'border-box',\n                        }\n                    }>\n                    <div style={{position:\"relative\", width:\"100%\", borderStyle:\"solid\", borderColor:\"#C0C0C0\", borderWidth:\"1px\"}} />\n                    <div style={{position:\"relative\", marginTop:\"15px\"}}/>\n                    <div style={{float: 'left', position:\"relative\", marginLeft:\"15px\", borderStyle:\"solid\", borderColor:\"red\", borderWidth:\"0px\", height:'auto'}}>\n                        <div style={ { float: 'left', width:'36px', borderStyle:\"solid\", borderColor:\"red\", borderWidth:\"0px\" } }>\n                            <Button bsSize=\"small\" onClick={ this.onRemoveButtonClick }>\n                                <Glyphicon glyph=\"minus\"/>\n                            </Button>\n                            <Button style={{marginTop:'5px'}} bsSize=\"small\" onClick={ this.onAddButtonClick }>\n                                <Glyphicon glyph=\"plus\"/>\n                            </Button>\n                        </div>\n                        <div style={ { position:\"relative\", float: 'left', height: \"100%\", borderStyle:\"solid\", borderColor:\"red\", borderWidth:\"0px\" } }>\n                            <Form inline>\n                                <FormGroup>\n                                    <InputGroup style={ timeInputStyle }>\n                                        <FormControl type=\"text\" value={ formatToHHmmss_ss(this.state.start) }\n                                                     onChange={\n                                                         (e) => {\n                                                             let sec = parseHHmmss_ss(e.target.value);\n                                                             this.setState(Object.assign({}, { start: sec }));\n                                                         }\n                                                     }/>\n                                    </InputGroup>\n                                    <ControlLabel>~</ControlLabel>\n                                    <InputGroup style={ timeInputStyle }>\n                                        <FormControl type=\"text\" value={ formatToHHmmss_ss(this.state.end) } onChange={\n                                            (e) => {\n                                                let sec = parseHHmmss_ss(e.target.value);\n                                                this.setState(Object.assign({}, { end: sec }));\n                                            }\n                                        }/>\n                                    </InputGroup>\n                                </FormGroup>\n                            </Form>\n                            <Checkbox style={ { marginLeft: '5px' } } checked={ this.state.learn }\n                                      onChange={ this.onCheckChanged }>Learning</Checkbox>\n                        </div>\n                        <div style={ { float: 'left', width: '266px', marginRight:'15px', marginBottom:'15px', boxSizing: 'border-box', borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                            <FormGroup>\n                                <FormControl style={ textAreaStyle } componentClass=\"textarea\" placeholder=\"\"\n                                             value={ this.state.english } onChange={ this.onEnglishTextChanged }/>\n                                <div style={ { marginTop: '5px' } }></div>\n                                <FormControl style={ textAreaStyle } componentClass=\"textarea\" placeholder=\"\"\n                                             value={this.state.kor} onChange={this.onKorTextChanged}/>\n                            </FormGroup>\n                            <div style={ {position:'relative', float: 'right', clear: 'left', borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                                {/*<Button bsSize=\"small\" onClick={ this.onTranslateButtonClick }>TRANSLATE</Button>*/}\n                                <Button bsSize=\"small\" style={{marginLeft:'5px'}} onClick={ this.onPlayButtonClick }>PLAY</Button>\n                            </div>\n                        </div>\n                    </div>\n            </Panel.Body>\n        );\n    }\n}\n\nexport default SubtitleBorderElement;\n","import { confirmAlert } from 'react-confirm-alert'; // Import\nimport React from 'react';\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport {Alert, Button} from 'react-bootstrap';\n\nexport const simpleAlert = (msg) => {\n    confirmAlert({\n        customUI: ({ onClose }) => {\n            const centerBoxStyle = {\n                display: \"table\", marginLeft: \"auto\", marginRight: \"auto\"\n            }\n\n            return (\n                <div className='custom-ui'>\n                    <Alert bsStyle=\"info\">\n                        <div style={centerBoxStyle}>\n                            <h4>알림</h4>\n                        </div>\n                        <div style={{padding:'5px'}}/>\n                        <p>{msg}</p>\n                        <div style={{padding:'10px'}}/>\n                        <div style={centerBoxStyle}>\n                            <Button bsStyle=\"info\" onClick={onClose}>확인</Button>\n                        </div>\n                    </Alert>\n                </div>\n            )\n        }\n    })\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport fetch from 'cross-fetch';\nimport SubtitleBorderElement from './SubtitleBorderElement';\nimport { PanelGroup, Button, ControlLabel, FormGroup, InputGroup, FormControl, Form, Panel } from 'react-bootstrap';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport moment from 'moment';\nimport {isUpdatedMoment} from '../../util/util-moment'\nimport {simpleAlert} from '../../util/util-dialog'\n\nvar _ = require('underscore');\nvar xml2js = require('xml2js');\nvar convert = require('xml-js');\n\nclass SubtitleBorder extends Component {\n\n    currentEvent = {\n        youtubePlayerBorderEvent: {\n            youtubeIdUpdateEvent: {\n                moment: null,\n                youtubeId: null,\n            },\n        },\n    };\n\n    sendingEvent = {\n        playPhaseEvent: {\n            moment: null,\n            startTime: null,\n            endTime: null\n        }\n    }\n\n    dom = null;\n    element = null;\n    fileReader = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            transcript: [],\n            nearNext: '',\n        };\n        this.update = this.update.bind(this);\n        this.fetchTranscriptXml = this.fetchTranscriptXml.bind(this);\n        this.dom = document.createElement('div');\n        this.element = document.createElement(\"a\");\n        this.fileReader = new FileReader();\n        this.fileReader.onload = () => {\n            this.onFileContentLoaded(this.fileReader.result);\n        };\n    }\n\n    onFileContentLoaded = (content) => {\n        try {\n            let rawJson = JSON.parse(convert.xml2json(content, { compact: true, spaces: 4 }));\n            console.log(rawJson);\n            let transcript = [];\n            if (rawJson.transcript && rawJson.transcript.text && rawJson.transcript.text.length > 0) {\n                rawJson.transcript.text.map(e => {\n                    let attributes = e._attributes;\n                    e.dur = parseFloat(attributes.dur);\n                    e.start = parseFloat(attributes.start);\n                    e.end = e.start + e.dur;\n                    e.learn = attributes.learning === 'true' ? true : false;\n                    e.english = e._text;\n                    e.kor = attributes.kor === undefined ? \"\" : attributes.kor;\n                    delete e._attributes;\n                    delete e._text;\n                    return e;\n                });\n                transcript = rawJson.transcript.text;\n            }\n            console.log(transcript);\n            this.setState({ transcript: transcript });\n            this.refs.fileUploader.value = \"\";\n        } catch (e) {\n            simpleAlert('파일에 문제가 있습니다.');\n        }\n    };\n\n    componentWillReceiveProps(newProps) {\n        this.update(newProps);\n    }\n\n    update = async (newProps) => {\n        console.log(newProps);\n        let newYoutubeIdUpdateEvent = newProps.youtubePlayerBorderEvent.youtubeIdUpdateEvent;\n        let currentYoutubeIdUpdateEvent = this.currentEvent.youtubePlayerBorderEvent.youtubeIdUpdateEvent;\n        if (isUpdatedMoment(currentYoutubeIdUpdateEvent.moment, newYoutubeIdUpdateEvent.moment)) {\n            this.currentEvent.youtubePlayerBorderEvent.youtubeIdUpdateEvent = _.clone(newYoutubeIdUpdateEvent);\n            console.log(newYoutubeIdUpdateEvent.youtubeId);\n            if (newYoutubeIdUpdateEvent.youtubeId !== null) {\n                try {\n                    let transcript = await this.fetchTranscriptXml(newYoutubeIdUpdateEvent.youtubeId);\n                    // let ele = transcript[0];\n                    // transcript = [].concat([ele]);\n                    this.setState({ transcript: transcript });\n                    console.log(transcript);\n                } catch (e) {\n                    simpleAlert('youtubeId가 유효하지 않습니다.');\n                }\n            }\n        }\n    };\n\n    onExportButtonClicked = (e) => {\n        let title = this.currentEvent.youtubePlayerBorderEvent.youtubeIdUpdateEvent.youtubeId;\n        let content = this.refineTranscriptToXmlJson();\n        let file = new Blob([content], {type: 'text/plain'});\n        this.element.href = URL.createObjectURL(file);\n        this.element.download = `${title}.xml`; // \"myFile.xml\";\n        this.element.click();\n    };\n\n    onImportButtonClicked = (e) => {\n        this.refs.fileUploader.click();\n    };\n\n    onChangeFile = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        let file = e.target.files[0];\n        if (file)\n            this.fileReader.readAsText(file);\n    };\n\n    onReorderButtonClicked = (e) => {\n        this.sortTranscripts();\n    };\n\n    refineTranscriptToXmlJson = () => {\n        let targetJson = {\n            \"declaration\": {\n                \"attributes\": {\n                    \"version\": \"1.0\",\n                    \"encoding\": \"utf-8\"\n                }\n            },\n            \"elements\": [\n                {\n                    \"type\": \"element\",\n                    \"name\": \"transcript\",\n                    \"elements\": [],\n                }\n            ]\n        }\n        let src = [...this.state.transcript];\n        let elements = targetJson.elements[0].elements;\n        src.forEach(e => {\n            console.log(e.kor);\n            let ele = {\n                \"type\": \"element\",\n                \"name\": \"text\",\n                \"attributes\": {\n                    \"start\": e.start.toString(),\n                    \"dur\": (e.end - e.start).toString(),\n                    \"learning\": e.learn.toString(),\n                    \"kor\": e.kor,\n                },\n                \"elements\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": e.english,\n                    }\n                ]\n            }\n            elements.push(ele);\n        });\n\n        return convert.json2xml(targetJson, {compact: false, ignoreComment: true, spaces: 4});\n    }\n\n    createAction = () => {\n        return { type: 'SubtitleBorder', payload: Object.assign({}, _.clone(this.sendingEvent)) };\n    };\n\n    htmlDecode = (input) => {\n        this.dom.innerHTML = input;\n        return this.dom.childNodes.length === 0 ? '' : this.dom.childNodes[0].nodeValue;\n    };\n\n    fetchTranscriptXml = async (youtubeId) => {\n        let data = await fetch(`https://www.youtube.com/api/timedtext?v=${ youtubeId }&lang=en`, { method: 'GET' }).then(response => {\n            return response.text();\n        }).then(text => {\n            return text;\n        });\n\n        const transcript = await new Promise((resolve, reject) => xml2js.parseString(data, (err, result) => {\n            if (err)\n                reject(err);\n            else\n                resolve(result.transcript.text);\n        }));\n\n        transcript.map(ele => {\n            ele.start = parseFloat(ele.$.start);\n            ele.dur = parseFloat(ele.$.dur);\n            ele.end = ele.start + ele.dur;\n            ele.english = this.htmlDecode(ele._);\n            ele.learn = false;\n            ele.focus = false;\n            ele.kor = \"\";\n            delete ele.$;\n            delete ele._;\n            return ele;\n        });\n\n        return transcript;\n    };\n\n    removeSubtitleElement = (i) => {\n        this.setState({\n            transcript: [...this.state.transcript].filter((ele, idx) => {\n                return idx !== i;\n            }),\n        });\n    };\n\n    addSubtitleElement = (i) => {\n        console.log('addSubtitleElement');\n        let front = this.state.transcript[i];\n\n        let rear = i < this.state.transcript.length-1 ? this.state.transcript[i+1] : null;\n        let dur = rear === null? 0 : rear.start - front.end;\n\n        let transcriptEle = {\n            dur: dur,\n            start: front.end,\n            end: front.end + dur,\n            english: \"\",\n            learn: false,\n        };\n        let copied = [...this.state.transcript];\n        copied.splice(i+1, 0, transcriptEle);\n        copied.join();\n        this.setState({ transcript : copied });\n    };\n\n    playPhase = (phaseInfo) => {\n        this.sendingEvent.playPhaseEvent.moment = moment();\n        this.sendingEvent.playPhaseEvent.startTime = phaseInfo.startTime;\n        this.sendingEvent.playPhaseEvent.endTime = phaseInfo.endTime;\n        this.props.dispatch(this.createAction());\n    };\n\n    onStateChanged = (props, state) => {\n        let target = [...this.state.transcript].map((e, i) => {\n            if (i === props.index) {\n                e.english = state.english;\n                e.kor = state.kor;\n                e.start = state.start;\n                e.end = state.end;\n                e.learn = state.learn;\n            }\n            return e;\n        });\n        this.setState({ transcript: target });\n        console.log('onStateChanged');\n    };\n\n    sortTranscripts = () => {\n        if (this.state.transcript.length < 2)\n            return;\n        let target = [...this.state.transcript];\n        target.sort((a, b) => a.start - b.start);\n        this.setState({ transcript: target });\n    };\n\n    render() {\n        return (\n            <div style={ { position: 'absolute', marginLeft: '630px', width:'auto'} }>\n                <PanelGroup>\n                    <Panel bsStyle=\"primary\" style={ { height: '100%' } }>\n                        <Panel.Heading style={ { fontSize: '16px' } }>\n                            SUBTITLE\n                        </Panel.Heading>\n                        <Panel.Body style={ {\n                            position: 'relative',\n                            boxSizing: 'border-box',\n                            height: '676px', // 655\n                            padding: '0px',\n                        } }>\n                            <div style={ {\n                                overflow: 'scroll',\n                                height:'100%',\n                                borderWidth: '1px',\n                                borderColor: 'black',\n                                borderStyle: '',\n                            } }>\n                                {\n                                    this.state.transcript.map((ele, i) => {\n                                        return <SubtitleBorderElement\n                                            key={ i }\n\n                                            english={ ele.english }\n                                            index={ i }\n                                            start={ ele.start }\n                                            end={ ele.end }\n                                            learn={ ele.learn }\n                                            focus={ ele.focus }\n                                            kor={ ele.kor }\n\n                                            onStateChanged={ this.onStateChanged }\n                                            onAddButtonClicked={ this.addSubtitleElement }\n                                            onRemoveButtonClicked={ this.removeSubtitleElement }\n                                            onPlayButtonClicked={ this.playPhase }\n                                        />;\n                                    })\n                                }\n                            </div>\n                        </Panel.Body>\n                    </Panel>\n                    <Panel>\n                        <Panel.Heading>\n                            <Panel.Body style={{position:'relative', height:'auto', padding:'0px'}}>\n                                <input onChange={this.onChangeFile} type=\"file\" id=\"file\" ref=\"fileUploader\" style={{display: \"none\"}}/>\n                                <div style={ {position:'relative', height:'100%', marginBottom:'0px',borderWidth:'0px', borderColor:'red', borderStyle:'solid'} }>\n                                    <Button style={{position:'relative', float:'right'}} bsSize=\"small\" onClick={this.onExportButtonClicked}>EXPORT</Button>\n                                    <Button style={{position:'relative', float:'right', marginRight:'5px'}} bsSize=\"small\" onClick={this.onImportButtonClicked}>IMPORT</Button>\n                                    <Button style={{position:'relative', float:'right', marginRight:'5px'}} bsSize=\"small\" onClick={this.onReorderButtonClicked}>REORDER</Button>\n                                </div>\n                            </Panel.Body>\n                        </Panel.Heading>\n                    </Panel>\n                </PanelGroup>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        youtubePlayerBorderEvent: state.youtubePlayerBorderEvent.payload,\n    };\n};\n\nexport default connect(mapStateToProps)(SubtitleBorder);\n","import React, { Component } from 'react'\nimport YoutubePlayerBorder from './components/youtubePlayer/YoutubePlayerBorder'\nimport SubtitleBorder from './components/subtitle/SubtitleBorder'\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <div style={ {position:\"absolute\", width:\"610px\"} }>\n                    <YoutubePlayerBorder />\n                </div>\n                <SubtitleBorder />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport thunkMiddleware from 'redux-thunk'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers/reducers'\n\nimport App from './App.js'\nlet rootElement = document.getElementById('root')\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n)\n"],"sourceRoot":""}